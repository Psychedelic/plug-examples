{"ast":null,"code":"export default (({\n  IDL\n}) => {\n  const TokenIndex = IDL.Nat32;\n  const AccountIdentifier = IDL.Text;\n  const TokenIdentifier = IDL.Text;\n  const Balance = IDL.Nat;\n  const Time = IDL.Int;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Memo = IDL.Vec(IDL.Nat8);\n  const Listing = IDL.Record({\n    locked: IDL.Opt(Time),\n    seller: IDL.Principal,\n    price: IDL.Nat64\n  });\n  const User = IDL.Variant({\n    principal: IDL.Principal,\n    address: AccountIdentifier\n  });\n  const CommonError = IDL.Variant({\n    InvalidToken: TokenIdentifier,\n    Other: IDL.Text\n  });\n  const BalanceRequest = IDL.Record({\n    token: TokenIdentifier,\n    user: User\n  });\n  const BalanceResult = IDL.Variant({\n    ok: Balance,\n    err: CommonError\n  });\n  const DetailsResult = IDL.Variant({\n    ok: IDL.Tuple(AccountIdentifier, IDL.Opt(Listing)),\n    err: CommonError\n  });\n  const TokensResult = IDL.Variant({\n    ok: IDL.Vec(TokenIndex),\n    err: CommonError\n  });\n  const TokenExtResult = IDL.Variant({\n    ok: IDL.Vec(IDL.Tuple(TokenIndex, IDL.Opt(Listing), IDL.Opt(IDL.Vec(IDL.Nat8)))),\n    err: CommonError\n  });\n  const TransferRequest = IDL.Record({\n    to: User,\n    token: TokenIdentifier,\n    notify: IDL.Bool,\n    from: User,\n    memo: Memo,\n    subaccount: IDL.Opt(SubAccount),\n    amount: Balance\n  });\n  const TransferResult = IDL.Variant({\n    ok: Balance,\n    err: IDL.Variant({\n      CannotNotify: AccountIdentifier,\n      InsufficientBalance: IDL.Null,\n      InvalidToken: TokenIdentifier,\n      Rejected: IDL.Null,\n      Unauthorized: AccountIdentifier,\n      Other: IDL.Text\n    })\n  });\n  const Metadata = IDL.Variant({\n    fungible: IDL.Record({\n      decimals: IDL.Nat8,\n      metadata: IDL.Opt(IDL.Vec(IDL.Nat8)),\n      name: IDL.Text,\n      symbol: IDL.Text\n    }),\n    nonfungible: IDL.Record({\n      metadata: IDL.Opt(IDL.Vec(IDL.Nat8))\n    })\n  });\n  const MetadataResult = IDL.Variant({\n    ok: Metadata,\n    err: CommonError\n  });\n  return IDL.Service({\n    balance: IDL.Func([BalanceRequest], [BalanceResult], ['query']),\n    details: IDL.Func([TokenIdentifier], [DetailsResult], ['query']),\n    tokens: IDL.Func([AccountIdentifier], [TokensResult], ['query']),\n    tokens_ext: IDL.Func([AccountIdentifier], [TokenExtResult], []),\n    transfer: IDL.Func([TransferRequest], [TransferResult], []),\n    metadata: IDL.Func([TokenIdentifier], [MetadataResult], ['query'])\n  });\n});\nexport const init = () => {\n  return [];\n};","map":{"version":3,"sources":["/Users/tomasrocchi/Documents/fleek/plug-examples/src/idls/ext.did.js"],"names":["IDL","TokenIndex","Nat32","AccountIdentifier","Text","TokenIdentifier","Balance","Nat","Time","Int","SubAccount","Vec","Nat8","Memo","Listing","Record","locked","Opt","seller","Principal","price","Nat64","User","Variant","principal","address","CommonError","InvalidToken","Other","BalanceRequest","token","user","BalanceResult","ok","err","DetailsResult","Tuple","TokensResult","TokenExtResult","TransferRequest","to","notify","Bool","from","memo","subaccount","amount","TransferResult","CannotNotify","InsufficientBalance","Null","Rejected","Unauthorized","Metadata","fungible","decimals","metadata","name","symbol","nonfungible","MetadataResult","Service","balance","Func","details","tokens","tokens_ext","transfer","init"],"mappings":"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","sourcesContent":["export default ({ IDL }) => {\n  const TokenIndex = IDL.Nat32;\n  const AccountIdentifier = IDL.Text;\n  const TokenIdentifier = IDL.Text;\n  const Balance = IDL.Nat;\n  const Time = IDL.Int;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Memo = IDL.Vec(IDL.Nat8);\n  const Listing = IDL.Record({\n    locked: IDL.Opt(Time),\n    seller: IDL.Principal,\n    price: IDL.Nat64,\n  });\n  const User = IDL.Variant({\n    principal: IDL.Principal,\n    address: AccountIdentifier,\n  });\n  const CommonError = IDL.Variant({\n    InvalidToken: TokenIdentifier,\n    Other: IDL.Text,\n  });\n\n  const BalanceRequest = IDL.Record({\n    token: TokenIdentifier,\n    user: User,\n  });\n  const BalanceResult = IDL.Variant({ ok: Balance, err: CommonError });\n\n  const DetailsResult = IDL.Variant({\n    ok: IDL.Tuple(AccountIdentifier, IDL.Opt(Listing)),\n    err: CommonError,\n  });\n\n  const TokensResult = IDL.Variant({\n    ok: IDL.Vec(TokenIndex),\n    err: CommonError,\n  });\n  const TokenExtResult = IDL.Variant({\n    ok: IDL.Vec(\n      IDL.Tuple(TokenIndex, IDL.Opt(Listing), IDL.Opt(IDL.Vec(IDL.Nat8)))\n    ),\n    err: CommonError,\n  });\n\n  const TransferRequest = IDL.Record({\n    to: User,\n    token: TokenIdentifier,\n    notify: IDL.Bool,\n    from: User,\n    memo: Memo,\n    subaccount: IDL.Opt(SubAccount),\n    amount: Balance,\n  });\n  const TransferResult = IDL.Variant({\n    ok: Balance,\n    err: IDL.Variant({\n      CannotNotify: AccountIdentifier,\n      InsufficientBalance: IDL.Null,\n      InvalidToken: TokenIdentifier,\n      Rejected: IDL.Null,\n      Unauthorized: AccountIdentifier,\n      Other: IDL.Text,\n    }),\n  });\n  const Metadata = IDL.Variant({\n    fungible: IDL.Record({\n      decimals: IDL.Nat8,\n      metadata: IDL.Opt(IDL.Vec(IDL.Nat8)),\n      name: IDL.Text,\n      symbol: IDL.Text,\n    }),\n    nonfungible: IDL.Record({ metadata: IDL.Opt(IDL.Vec(IDL.Nat8)) }),\n  });\n  const MetadataResult = IDL.Variant({ ok: Metadata, err: CommonError });\n  return IDL.Service({\n    balance: IDL.Func([BalanceRequest], [BalanceResult], ['query']),\n    details: IDL.Func([TokenIdentifier], [DetailsResult], ['query']),\n    tokens: IDL.Func([AccountIdentifier], [TokensResult], ['query']),\n    tokens_ext: IDL.Func([AccountIdentifier], [TokenExtResult], []),\n    transfer: IDL.Func([TransferRequest], [TransferResult], []),\n    metadata: IDL.Func([TokenIdentifier], [MetadataResult], ['query']),\n  });\n};\nexport const init = () => {\n  return [];\n};\n"]},"metadata":{},"sourceType":"module"}