{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport init, { bls_init, bls_verify } from '../vendor/bls/bls';\nexport var verify;\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns Promise resolving a boolean\n */\n\nexport function blsVerify(_x, _x2, _x3) {\n  return _blsVerify.apply(this, arguments);\n}\n\nfunction _blsVerify() {\n  _blsVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pk, sig, msg) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (verify) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return init();\n\n          case 3:\n            if (!(bls_init() !== 0)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Cannot initialize BLS');\n\n          case 5:\n            verify = function verify(pk1, sig1, msg1) {\n              // Reorder things from what the WASM expects (sig, m, w).\n              return bls_verify(sig1, msg1, pk1) === 0;\n            };\n\n          case 6:\n            return _context.abrupt(\"return\", verify(pk, sig, msg));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _blsVerify.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/utils/bls.ts"],"names":[],"mappings":";;AAAA,OAAO,IAAP,IAAe,QAAf,EAAyB,UAAzB,QAA2C,mBAA3C;AAEA,OAAO,IAAI,MAAJ;AAEP;;;;;;AAMG;;AACH,gBAAsB,SAAtB;AAAA;AAAA;;;wEAAO,iBACL,EADK,EAEL,GAFK,EAGL,GAHK;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKA,MALA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMG,IAAI,EANP;;AAAA;AAAA,kBAOC,QAAQ,OAAO,CAPhB;AAAA;AAAA;AAAA;;AAAA,kBAQK,IAAI,KAAJ,CAAU,uBAAV,CARL;;AAAA;AAUH,YAAA,MAAM,GAAG,gBAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAoB;AAC3B;AACA,qBAAO,UAAU,CAAC,IAAD,EAAO,IAAP,EAAa,GAAb,CAAV,KAAgC,CAAvC;AACD,aAHD;;AAVG;AAAA,6CAeE,MAAM,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,CAfR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["import init, { bls_init, bls_verify } from '../vendor/bls/bls';\nexport let verify;\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns Promise resolving a boolean\n */\nexport async function blsVerify(pk, sig, msg) {\n    if (!verify) {\n        await init();\n        if (bls_init() !== 0) {\n            throw new Error('Cannot initialize BLS');\n        }\n        verify = (pk1, sig1, msg1) => {\n            // Reorder things from what the WASM expects (sig, m, w).\n            return bls_verify(sig1, msg1, pk1) === 0;\n        };\n    }\n    return verify(pk, sig, msg);\n}\n//# sourceMappingURL=bls.js.map"]},"metadata":{},"sourceType":"module"}