{"ast":null,"code":"import { Actor } from '../actor';\nimport { Principal } from '@dfinity/principal';\nimport managementCanisterIdl from './management_idl';\n/* tslint:enable */\n\n/**\n * Create a management canister actor.\n * @param config\n */\n\nexport function getManagementCanister(config) {\n  function transform(methodName, args, callConfig) {\n    const first = args[0];\n    let effectiveCanisterId = Principal.fromHex('');\n\n    if (first && typeof first === 'object' && first.canister_id) {\n      effectiveCanisterId = Principal.from(first.canister_id);\n    }\n\n    return {\n      effectiveCanisterId\n    };\n  }\n\n  return Actor.createActor(managementCanisterIdl, Object.assign(Object.assign(Object.assign({}, config), {\n    canisterId: Principal.fromHex('')\n  }), {\n    callTransform: transform,\n    queryTransform: transform\n  }));\n}","map":{"version":3,"sources":["../../../src/canisters/management.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAA8D,UAA9D;AACA,SAAS,SAAT,QAA0B,oBAA1B;AACA,OAAO,qBAAP,MAAkC,kBAAlC;AAgCA;;AAEA;;;AAGG;;AACH,OAAM,SAAU,qBAAV,CAAgC,MAAhC,EAAkD;AACtD,WAAS,SAAT,CAAmB,UAAnB,EAAuC,IAAvC,EAAwD,UAAxD,EAA8E;AAC5E,UAAM,KAAK,GAAG,IAAI,CAAC,CAAD,CAAlB;AACA,QAAI,mBAAmB,GAAG,SAAS,CAAC,OAAV,CAAkB,EAAlB,CAA1B;;AACA,QAAI,KAAK,IAAI,OAAO,KAAP,KAAiB,QAA1B,IAAsC,KAAK,CAAC,WAAhD,EAA6D;AAC3D,MAAA,mBAAmB,GAAG,SAAS,CAAC,IAAV,CAAe,KAAK,CAAC,WAArB,CAAtB;AACD;;AACD,WAAO;AAAE,MAAA;AAAF,KAAP;AACD;;AAED,SAAO,KAAK,CAAC,WAAN,CAA4C,qBAA5C,EAAiE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACnE,MADmE,CAAA,EAC7D;AACT,IAAA,UAAU,EAAE,SAAS,CAAC,OAAV,CAAkB,EAAlB;AADH,GAD6D,CAAA,EAGnE;AACD,IAAA,aAAa,EAAE,SADd;AAED,IAAA,cAAc,EAAE;AAFf,GAHmE,CAAjE,CAAP;AAQD","sourceRoot":"","sourcesContent":["import { Actor } from '../actor';\nimport { Principal } from '@dfinity/principal';\nimport managementCanisterIdl from './management_idl';\n/* tslint:enable */\n/**\n * Create a management canister actor.\n * @param config\n */\nexport function getManagementCanister(config) {\n    function transform(methodName, args, callConfig) {\n        const first = args[0];\n        let effectiveCanisterId = Principal.fromHex('');\n        if (first && typeof first === 'object' && first.canister_id) {\n            effectiveCanisterId = Principal.from(first.canister_id);\n        }\n        return { effectiveCanisterId };\n    }\n    return Actor.createActor(managementCanisterIdl, Object.assign(Object.assign(Object.assign({}, config), { canisterId: Principal.fromHex('') }), {\n        callTransform: transform,\n        queryTransform: transform,\n    }));\n}\n//# sourceMappingURL=management.js.map"]},"metadata":{},"sourceType":"module"}