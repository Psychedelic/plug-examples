{"ast":null,"code":"export default (({\n  IDL\n}) => {\n  const TransactionId = IDL.Nat64;\n  const BurnError = IDL.Variant({\n    InsufficientBalance: IDL.Null,\n    InvalidTokenContract: IDL.Null,\n    NotSufficientLiquidity: IDL.Null\n  });\n  const TxReceipt = IDL.Variant({\n    Err: IDL.Variant({\n      InsufficientAllowance: IDL.Null,\n      InsufficientBalance: IDL.Null\n    }),\n    Ok: IDL.Nat\n  });\n  const BurnResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: BurnError\n  });\n  const TokenMetaData = IDL.Record({\n    features: IDL.Vec(IDL.Text),\n    name: IDL.Text,\n    decimal: IDL.Nat8,\n    symbol: IDL.Text\n  });\n  const NotifyArgs = IDL.Record({\n    canister_id: IDL.Principal,\n    method_name: IDL.Text\n  });\n  const TransferError = IDL.Variant({\n    CallFailed: IDL.Null,\n    InsufficientBalance: IDL.Null,\n    Unknown: IDL.Null,\n    AmountTooLarge: IDL.Null\n  });\n  const TransferResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: TransferError\n  });\n  return IDL.Service({\n    meta: IDL.Func([], [TokenMetaData], ['query']),\n    meta_certified: IDL.Func([], [TokenMetaData], []),\n    balance: IDL.Func([IDL.Opt(IDL.Principal)], [IDL.Nat64], []),\n    burn: IDL.Func([IDL.Record({\n      canister_id: IDL.Principal,\n      amount: IDL.Nat64\n    })], [BurnResult], []),\n    transfer: IDL.Func([IDL.Record({\n      to: IDL.Principal,\n      from: IDL.Opt(IDL.Principal),\n      amount: IDL.Nat64\n    })], [TransferResult], []),\n    transferERC20: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], [])\n  });\n});\nexport const init = () => {\n  return [];\n};","map":{"version":3,"sources":["/Users/tomasrocchi/Documents/fleek/plug-examples/src/idls/xtc.did.js"],"names":["IDL","TransactionId","Nat64","BurnError","Variant","InsufficientBalance","Null","InvalidTokenContract","NotSufficientLiquidity","TxReceipt","Err","InsufficientAllowance","Ok","Nat","BurnResult","TokenMetaData","Record","features","Vec","Text","name","decimal","Nat8","symbol","NotifyArgs","canister_id","Principal","method_name","TransferError","CallFailed","Unknown","AmountTooLarge","TransferResult","Service","meta","Func","meta_certified","balance","Opt","burn","amount","transfer","to","from","transferERC20","init"],"mappings":"AAAA,gBAAe,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAa;AAC1B,QAAMC,aAAa,GAAGD,GAAG,CAACE,KAA1B;AACA,QAAMC,SAAS,GAAGH,GAAG,CAACI,OAAJ,CAAY;AAC5BC,IAAAA,mBAAmB,EAAEL,GAAG,CAACM,IADG;AAE5BC,IAAAA,oBAAoB,EAAEP,GAAG,CAACM,IAFE;AAG5BE,IAAAA,sBAAsB,EAAER,GAAG,CAACM;AAHA,GAAZ,CAAlB;AAMA,QAAMG,SAAS,GAAGT,GAAG,CAACI,OAAJ,CAAY;AAC5BM,IAAAA,GAAG,EAAEV,GAAG,CAACI,OAAJ,CAAY;AACfO,MAAAA,qBAAqB,EAAEX,GAAG,CAACM,IADZ;AAEfD,MAAAA,mBAAmB,EAAEL,GAAG,CAACM;AAFV,KAAZ,CADuB;AAK5BM,IAAAA,EAAE,EAAEZ,GAAG,CAACa;AALoB,GAAZ,CAAlB;AAQA,QAAMC,UAAU,GAAGd,GAAG,CAACI,OAAJ,CAAY;AAC7BQ,IAAAA,EAAE,EAAEX,aADyB;AAE7BS,IAAAA,GAAG,EAAEP;AAFwB,GAAZ,CAAnB;AAIA,QAAMY,aAAa,GAAGf,GAAG,CAACgB,MAAJ,CAAW;AAC/BC,IAAAA,QAAQ,EAAEjB,GAAG,CAACkB,GAAJ,CAAQlB,GAAG,CAACmB,IAAZ,CADqB;AAE/BC,IAAAA,IAAI,EAAEpB,GAAG,CAACmB,IAFqB;AAG/BE,IAAAA,OAAO,EAAErB,GAAG,CAACsB,IAHkB;AAI/BC,IAAAA,MAAM,EAAEvB,GAAG,CAACmB;AAJmB,GAAX,CAAtB;AAMA,QAAMK,UAAU,GAAGxB,GAAG,CAACgB,MAAJ,CAAW;AAC5BS,IAAAA,WAAW,EAAEzB,GAAG,CAAC0B,SADW;AAE5BC,IAAAA,WAAW,EAAE3B,GAAG,CAACmB;AAFW,GAAX,CAAnB;AAIA,QAAMS,aAAa,GAAG5B,GAAG,CAACI,OAAJ,CAAY;AAChCyB,IAAAA,UAAU,EAAE7B,GAAG,CAACM,IADgB;AAEhCD,IAAAA,mBAAmB,EAAEL,GAAG,CAACM,IAFO;AAGhCwB,IAAAA,OAAO,EAAE9B,GAAG,CAACM,IAHmB;AAIhCyB,IAAAA,cAAc,EAAE/B,GAAG,CAACM;AAJY,GAAZ,CAAtB;AAMA,QAAM0B,cAAc,GAAGhC,GAAG,CAACI,OAAJ,CAAY;AACjCQ,IAAAA,EAAE,EAAEX,aAD6B;AAEjCS,IAAAA,GAAG,EAAEkB;AAF4B,GAAZ,CAAvB;AAIA,SAAO5B,GAAG,CAACiC,OAAJ,CAAY;AACjBC,IAAAA,IAAI,EAAElC,GAAG,CAACmC,IAAJ,CAAS,EAAT,EAAa,CAACpB,aAAD,CAAb,EAA8B,CAAC,OAAD,CAA9B,CADW;AAEjBqB,IAAAA,cAAc,EAAEpC,GAAG,CAACmC,IAAJ,CAAS,EAAT,EAAa,CAACpB,aAAD,CAAb,EAA8B,EAA9B,CAFC;AAGjBsB,IAAAA,OAAO,EAAErC,GAAG,CAACmC,IAAJ,CAAS,CAACnC,GAAG,CAACsC,GAAJ,CAAQtC,GAAG,CAAC0B,SAAZ,CAAD,CAAT,EAAmC,CAAC1B,GAAG,CAACE,KAAL,CAAnC,EAAgD,EAAhD,CAHQ;AAIjBqC,IAAAA,IAAI,EAAEvC,GAAG,CAACmC,IAAJ,CACJ,CAACnC,GAAG,CAACgB,MAAJ,CAAW;AAAES,MAAAA,WAAW,EAAEzB,GAAG,CAAC0B,SAAnB;AAA8Bc,MAAAA,MAAM,EAAExC,GAAG,CAACE;AAA1C,KAAX,CAAD,CADI,EAEJ,CAACY,UAAD,CAFI,EAGJ,EAHI,CAJW;AASjB2B,IAAAA,QAAQ,EAAEzC,GAAG,CAACmC,IAAJ,CACR,CACEnC,GAAG,CAACgB,MAAJ,CAAW;AACT0B,MAAAA,EAAE,EAAE1C,GAAG,CAAC0B,SADC;AAETiB,MAAAA,IAAI,EAAE3C,GAAG,CAACsC,GAAJ,CAAQtC,GAAG,CAAC0B,SAAZ,CAFG;AAGTc,MAAAA,MAAM,EAAExC,GAAG,CAACE;AAHH,KAAX,CADF,CADQ,EAQR,CAAC8B,cAAD,CARQ,EASR,EATQ,CATO;AAoBjBY,IAAAA,aAAa,EAAE5C,GAAG,CAACmC,IAAJ,CAAS,CAACnC,GAAG,CAAC0B,SAAL,EAAgB1B,GAAG,CAACa,GAApB,CAAT,EAAmC,CAACJ,SAAD,CAAnC,EAAgD,EAAhD;AApBE,GAAZ,CAAP;AAsBD,CA9DD;AA+DA,OAAO,MAAMoC,IAAI,GAAG,MAAM;AACxB,SAAO,EAAP;AACD,CAFM","sourcesContent":["export default ({ IDL }) => {\n  const TransactionId = IDL.Nat64;\n  const BurnError = IDL.Variant({\n    InsufficientBalance: IDL.Null,\n    InvalidTokenContract: IDL.Null,\n    NotSufficientLiquidity: IDL.Null,\n  });\n\n  const TxReceipt = IDL.Variant({\n    Err: IDL.Variant({\n      InsufficientAllowance: IDL.Null,\n      InsufficientBalance: IDL.Null,\n    }),\n    Ok: IDL.Nat,\n  });\n\n  const BurnResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: BurnError,\n  });\n  const TokenMetaData = IDL.Record({\n    features: IDL.Vec(IDL.Text),\n    name: IDL.Text,\n    decimal: IDL.Nat8,\n    symbol: IDL.Text,\n  });\n  const NotifyArgs = IDL.Record({\n    canister_id: IDL.Principal,\n    method_name: IDL.Text,\n  });\n  const TransferError = IDL.Variant({\n    CallFailed: IDL.Null,\n    InsufficientBalance: IDL.Null,\n    Unknown: IDL.Null,\n    AmountTooLarge: IDL.Null,\n  });\n  const TransferResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: TransferError,\n  });\n  return IDL.Service({\n    meta: IDL.Func([], [TokenMetaData], ['query']),\n    meta_certified: IDL.Func([], [TokenMetaData], []),\n    balance: IDL.Func([IDL.Opt(IDL.Principal)], [IDL.Nat64], []),\n    burn: IDL.Func(\n      [IDL.Record({ canister_id: IDL.Principal, amount: IDL.Nat64 })],\n      [BurnResult],\n      []\n    ),\n    transfer: IDL.Func(\n      [\n        IDL.Record({\n          to: IDL.Principal,\n          from: IDL.Opt(IDL.Principal),\n          amount: IDL.Nat64,\n        }),\n      ],\n      [TransferResult],\n      []\n    ),\n    transferERC20: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\n  });\n};\nexport const init = () => {\n  return [];\n};\n"]},"metadata":{},"sourceType":"module"}