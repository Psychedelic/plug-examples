{"ast":null,"code":"export default(function(_ref){var IDL=_ref.IDL;var TransactionId=IDL.Nat64;var BurnError=IDL.Variant({InsufficientBalance:IDL.Null,InvalidTokenContract:IDL.Null,NotSufficientLiquidity:IDL.Null});var TxReceipt=IDL.Variant({Err:IDL.Variant({InsufficientAllowance:IDL.Null,InsufficientBalance:IDL.Null}),Ok:IDL.Nat});var BurnResult=IDL.Variant({Ok:TransactionId,Err:BurnError});var TokenMetaData=IDL.Record({features:IDL.Vec(IDL.Text),name:IDL.Text,decimal:IDL.Nat8,symbol:IDL.Text});var NotifyArgs=IDL.Record({canister_id:IDL.Principal,method_name:IDL.Text});var TransferError=IDL.Variant({CallFailed:IDL.Null,InsufficientBalance:IDL.Null,Unknown:IDL.Null,AmountTooLarge:IDL.Null});var TransferResult=IDL.Variant({Ok:TransactionId,Err:TransferError});return IDL.Service({meta:IDL.Func([],[TokenMetaData],['query']),meta_certified:IDL.Func([],[TokenMetaData],[]),balance:IDL.Func([IDL.Opt(IDL.Principal)],[IDL.Nat64],[]),burn:IDL.Func([IDL.Record({canister_id:IDL.Principal,amount:IDL.Nat64})],[BurnResult],[]),transfer:IDL.Func([IDL.Record({to:IDL.Principal,from:IDL.Opt(IDL.Principal),amount:IDL.Nat64})],[TransferResult],[]),transferERC20:IDL.Func([IDL.Principal,IDL.Nat],[TxReceipt],[])});});export var init=function init(){return[];};","map":{"version":3,"sources":["/Users/tomasrocchi/Documents/fleek/plug-examples/src/idls/xtc.did.js"],"names":["IDL","TransactionId","Nat64","BurnError","Variant","InsufficientBalance","Null","InvalidTokenContract","NotSufficientLiquidity","TxReceipt","Err","InsufficientAllowance","Ok","Nat","BurnResult","TokenMetaData","Record","features","Vec","Text","name","decimal","Nat8","symbol","NotifyArgs","canister_id","Principal","method_name","TransferError","CallFailed","Unknown","AmountTooLarge","TransferResult","Service","meta","Func","meta_certified","balance","Opt","burn","amount","transfer","to","from","transferERC20","init"],"mappings":"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","sourcesContent":["export default ({ IDL }) => {\n  const TransactionId = IDL.Nat64;\n  const BurnError = IDL.Variant({\n    InsufficientBalance: IDL.Null,\n    InvalidTokenContract: IDL.Null,\n    NotSufficientLiquidity: IDL.Null,\n  });\n\n  const TxReceipt = IDL.Variant({\n    Err: IDL.Variant({\n      InsufficientAllowance: IDL.Null,\n      InsufficientBalance: IDL.Null,\n    }),\n    Ok: IDL.Nat,\n  });\n\n  const BurnResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: BurnError,\n  });\n  const TokenMetaData = IDL.Record({\n    features: IDL.Vec(IDL.Text),\n    name: IDL.Text,\n    decimal: IDL.Nat8,\n    symbol: IDL.Text,\n  });\n  const NotifyArgs = IDL.Record({\n    canister_id: IDL.Principal,\n    method_name: IDL.Text,\n  });\n  const TransferError = IDL.Variant({\n    CallFailed: IDL.Null,\n    InsufficientBalance: IDL.Null,\n    Unknown: IDL.Null,\n    AmountTooLarge: IDL.Null,\n  });\n  const TransferResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: TransferError,\n  });\n  return IDL.Service({\n    meta: IDL.Func([], [TokenMetaData], ['query']),\n    meta_certified: IDL.Func([], [TokenMetaData], []),\n    balance: IDL.Func([IDL.Opt(IDL.Principal)], [IDL.Nat64], []),\n    burn: IDL.Func(\n      [IDL.Record({ canister_id: IDL.Principal, amount: IDL.Nat64 })],\n      [BurnResult],\n      []\n    ),\n    transfer: IDL.Func(\n      [\n        IDL.Record({\n          to: IDL.Principal,\n          from: IDL.Opt(IDL.Principal),\n          amount: IDL.Nat64,\n        }),\n      ],\n      [TransferResult],\n      []\n    ),\n    transferERC20: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\n  });\n};\nexport const init = () => {\n  return [];\n};\n"]},"metadata":{},"sourceType":"module"}