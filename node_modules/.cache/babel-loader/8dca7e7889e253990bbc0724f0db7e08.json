{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\n/**\n * Hashes a string to a number. Algorithm can be found here:\n * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf\n * @param s\n */\nfunction idlHash(s) {\n  var utf8encoder = new TextEncoder();\n  var array = utf8encoder.encode(s);\n  var h = 0;\n\n  var _iterator = _createForOfIteratorHelper(array),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n      h = (h * 223 + c) % Math.pow(2, 32);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return h;\n}\n/**\n *\n * @param label string\n * @returns number representing hashed label\n */\n\n\nexport function idlLabelToId(label) {\n  if (/^_\\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {\n    var num = +label.slice(1, -1);\n\n    if (Number.isSafeInteger(num) && num >= 0 && num < Math.pow(2, 32)) {\n      return num;\n    }\n  }\n\n  return idlHash(label);\n}","map":{"version":3,"sources":["../../../src/utils/hash.ts"],"names":[],"mappings":";;AAAA;;;;AAIG;AACH,SAAS,OAAT,CAAiB,CAAjB,EAA0B;AACxB,MAAM,WAAW,GAAG,IAAI,WAAJ,EAApB;AACA,MAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,CAAnB,CAAd;AAEA,MAAI,CAAC,GAAG,CAAR;;AAJwB,6CAKR,KALQ;AAAA;;AAAA;AAKxB,wDAAuB;AAAA,UAAZ,CAAY;AACrB,MAAA,CAAC,GAAG,CAAC,CAAC,GAAG,GAAJ,GAAU,CAAX,aAAgB,CAAhB,EAAqB,EAArB,CAAJ;AACD;AAPuB;AAAA;AAAA;AAAA;AAAA;;AAQxB,SAAO,CAAP;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAoC;AACxC,MAAI,UAAU,IAAV,CAAe,KAAf,KAAyB,qBAAqB,IAArB,CAA0B,KAA1B,CAA7B,EAA+D;AAC7D,QAAM,GAAG,GAAG,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAb;;AACA,QAAI,MAAM,CAAC,aAAP,CAAqB,GAArB,KAA6B,GAAG,IAAI,CAApC,IAAyC,GAAG,YAAG,CAAH,EAAQ,EAAR,CAAhD,EAA4D;AAC1D,aAAO,GAAP;AACD;AACF;;AACD,SAAO,OAAO,CAAC,KAAD,CAAd;AACD","sourceRoot":"","sourcesContent":["/**\n * Hashes a string to a number. Algorithm can be found here:\n * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf\n * @param s\n */\nfunction idlHash(s) {\n    const utf8encoder = new TextEncoder();\n    const array = utf8encoder.encode(s);\n    let h = 0;\n    for (const c of array) {\n        h = (h * 223 + c) % 2 ** 32;\n    }\n    return h;\n}\n/**\n *\n * @param label string\n * @returns number representing hashed label\n */\nexport function idlLabelToId(label) {\n    if (/^_\\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {\n        const num = +label.slice(1, -1);\n        if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {\n            return num;\n        }\n    }\n    return idlHash(label);\n}\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"module"}