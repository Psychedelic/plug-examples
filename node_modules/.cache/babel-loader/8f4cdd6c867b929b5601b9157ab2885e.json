{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { decode, encode } from './utils/base32';\nimport { getCrc32 } from './utils/getCrc';\nimport { sha224 } from './utils/sha224';\nvar SELF_AUTHENTICATING_SUFFIX = 2;\nvar ANONYMOUS_SUFFIX = 4;\n\nvar fromHexString = function fromHexString(hexString) {\n  var _a;\n\n  return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(function (byte) {\n    return parseInt(byte, 16);\n  }));\n};\n\nvar toHexString = function toHexString(bytes) {\n  return bytes.reduce(function (str, byte) {\n    return str + byte.toString(16).padStart(2, '0');\n  }, '');\n};\n\nexport var Principal = /*#__PURE__*/function () {\n  function Principal(_arr) {\n    _classCallCheck(this, Principal);\n\n    this._arr = _arr;\n    this._isPrincipal = true;\n  }\n\n  _createClass(Principal, [{\n    key: \"isAnonymous\",\n    value: function isAnonymous() {\n      return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return this._arr;\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return toHexString(this._arr).toUpperCase();\n    }\n  }, {\n    key: \"toText\",\n    value: function toText() {\n      var checksumArrayBuf = new ArrayBuffer(4);\n      var view = new DataView(checksumArrayBuf);\n      view.setUint32(0, getCrc32(this._arr));\n      var checksum = new Uint8Array(checksumArrayBuf);\n      var bytes = Uint8Array.from(this._arr);\n      var array = new Uint8Array([].concat(_toConsumableArray(checksum), _toConsumableArray(bytes)));\n      var result = encode(array);\n      var matches = result.match(/.{1,5}/g);\n\n      if (!matches) {\n        // This should only happen if there's no character, which is unreachable.\n        throw new Error();\n      }\n\n      return matches.join('-');\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toText();\n    }\n  }], [{\n    key: \"anonymous\",\n    value: function anonymous() {\n      return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n    }\n  }, {\n    key: \"selfAuthenticating\",\n    value: function selfAuthenticating(publicKey) {\n      var sha = sha224(publicKey);\n      return new this(new Uint8Array([].concat(_toConsumableArray(sha), [SELF_AUTHENTICATING_SUFFIX])));\n    }\n  }, {\n    key: \"from\",\n    value: function from(other) {\n      if (typeof other === 'string') {\n        return Principal.fromText(other);\n      } else if (typeof other === 'object' && other !== null && other._isPrincipal === true) {\n        return new Principal(other._arr);\n      }\n\n      throw new Error(\"Impossible to convert \".concat(JSON.stringify(other), \" to Principal.\"));\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      return new this(fromHexString(hex));\n    }\n  }, {\n    key: \"fromText\",\n    value: function fromText(text) {\n      var canisterIdNoDash = text.toLowerCase().replace(/-/g, '');\n      var arr = decode(canisterIdNoDash);\n      arr = arr.slice(4, arr.length);\n      var principal = new this(arr);\n\n      if (principal.toText() !== text) {\n        throw new Error(\"Principal \\\"\".concat(principal.toText(), \"\\\" does not have a valid checksum.\"));\n      }\n\n      return principal;\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(arr) {\n      return new this(arr);\n    }\n  }]);\n\n  return Principal;\n}();","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { decode, encode } from './utils/base32';\nimport { getCrc32 } from './utils/getCrc';\nimport { sha224 } from './utils/sha224';\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\nconst fromHexString = (hexString) => { var _a; return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16))); };\nconst toHexString = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nexport class Principal {\n    constructor(_arr) {\n        this._arr = _arr;\n        this._isPrincipal = true;\n    }\n    static anonymous() {\n        return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n    }\n    static selfAuthenticating(publicKey) {\n        const sha = sha224(publicKey);\n        return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n    }\n    static from(other) {\n        if (typeof other === 'string') {\n            return Principal.fromText(other);\n        }\n        else if (typeof other === 'object' &&\n            other !== null &&\n            other._isPrincipal === true) {\n            return new Principal(other._arr);\n        }\n        throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n    }\n    static fromHex(hex) {\n        return new this(fromHexString(hex));\n    }\n    static fromText(text) {\n        const canisterIdNoDash = text.toLowerCase().replace(/-/g, '');\n        let arr = decode(canisterIdNoDash);\n        arr = arr.slice(4, arr.length);\n        const principal = new this(arr);\n        if (principal.toText() !== text) {\n            throw new Error(`Principal \"${principal.toText()}\" does not have a valid checksum.`);\n        }\n        return principal;\n    }\n    static fromUint8Array(arr) {\n        return new this(arr);\n    }\n    isAnonymous() {\n        return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n    }\n    toUint8Array() {\n        return this._arr;\n    }\n    toHex() {\n        return toHexString(this._arr).toUpperCase();\n    }\n    toText() {\n        const checksumArrayBuf = new ArrayBuffer(4);\n        const view = new DataView(checksumArrayBuf);\n        view.setUint32(0, getCrc32(this._arr));\n        const checksum = new Uint8Array(checksumArrayBuf);\n        const bytes = Uint8Array.from(this._arr);\n        const array = new Uint8Array([...checksum, ...bytes]);\n        const result = encode(array);\n        const matches = result.match(/.{1,5}/g);\n        if (!matches) {\n            // This should only happen if there's no character, which is unreachable.\n            throw new Error();\n        }\n        return matches.join('-');\n    }\n    toString() {\n        return this.toText();\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}