{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Principal } from '@dfinity/principal';\nimport { AnonymousIdentity } from '../../auth';\nimport * as cbor from '../../cbor';\nimport { requestIdOf } from '../../request_id';\nimport { fromHex } from '../../utils/buffer';\nimport { Expiry } from './transforms';\nimport { SubmitRequestType } from './types';\nexport * from './transforms';\nexport { makeNonce } from './types';\nexport var RequestStatusResponseStatus;\n\n(function (RequestStatusResponseStatus) {\n  RequestStatusResponseStatus[\"Received\"] = \"received\";\n  RequestStatusResponseStatus[\"Processing\"] = \"processing\";\n  RequestStatusResponseStatus[\"Replied\"] = \"replied\";\n  RequestStatusResponseStatus[\"Rejected\"] = \"rejected\";\n  RequestStatusResponseStatus[\"Unknown\"] = \"unknown\";\n  RequestStatusResponseStatus[\"Done\"] = \"done\";\n})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {})); // Default delta for ingress expiry is 5 minutes.\n\n\nvar DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000; // Root public key for the IC, encoded as hex\n\nvar IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' + 'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' + '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' + 'b01291091c5f87b98883463f98091a0baaae';\n\nfunction getDefaultFetch() {\n  var result = typeof window === 'undefined' ? typeof global === 'undefined' ? typeof self === 'undefined' ? undefined : self.fetch.bind(self) : global.fetch.bind(global) : window.fetch.bind(window);\n\n  if (!result) {\n    throw new Error('Could not find default `fetch` implementation.');\n  }\n\n  return result;\n} // A HTTP agent allows users to interact with a client of the internet computer\n// using the available methods. It exposes an API that closely follows the\n// public view of the internet computer, and is not intended to be exposed\n// directly to the majority of users due to its low-level interface.\n//\n// There is a pipeline to apply transformations to the request before sending\n// it to the client. This is to decouple signature, nonce generation and\n// other computations so that this class can stay as simple as possible while\n// allowing extensions.\n\n\nexport var HttpAgent = /*#__PURE__*/function () {\n  function HttpAgent() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpAgent);\n\n    this.rootKey = fromHex(IC_ROOT_KEY);\n    this._pipeline = [];\n    this._rootKeyFetched = false;\n\n    if (options.source) {\n      if (!(options.source instanceof HttpAgent)) {\n        throw new Error(\"An Agent's source can only be another HttpAgent\");\n      }\n\n      this._pipeline = _toConsumableArray(options.source._pipeline);\n      this._identity = options.source._identity;\n      this._fetch = options.source._fetch;\n      this._host = options.source._host;\n      this._credentials = options.source._credentials;\n    } else {\n      this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n    }\n\n    if (options.host !== undefined) {\n      if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n        this._host = new URL(window.location.protocol + '//' + options.host);\n      } else {\n        this._host = new URL(options.host);\n      }\n    } else if (options.source !== undefined) {\n      // Safe to ignore here.\n      this._host = options.source._host;\n    } else {\n      var location = typeof window !== 'undefined' ? window.location : undefined;\n\n      if (!location) {\n        throw new Error('Must specify a host to connect to.');\n      }\n\n      this._host = new URL(location + '');\n    }\n\n    if (options.credentials) {\n      var _options$credentials = options.credentials,\n          name = _options$credentials.name,\n          password = _options$credentials.password;\n      this._credentials = \"\".concat(name).concat(password ? ':' + password : '');\n    }\n\n    this._identity = Promise.resolve(options.identity || new AnonymousIdentity());\n  }\n\n  _createClass(HttpAgent, [{\n    key: \"addTransform\",\n    value: function addTransform(fn) {\n      var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fn.priority || 0;\n\n      // Keep the pipeline sorted at all time, by priority.\n      var i = this._pipeline.findIndex(function (x) {\n        return (x.priority || 0) < priority;\n      });\n\n      this._pipeline.splice(i >= 0 ? i : this._pipeline.length, 0, Object.assign(fn, {\n        priority: priority\n      }));\n    }\n  }, {\n    key: \"getPrincipal\",\n    value: function () {\n      var _getPrincipal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._identity;\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent.getPrincipal());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getPrincipal() {\n        return _getPrincipal.apply(this, arguments);\n      }\n\n      return getPrincipal;\n    }()\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(canisterId, options, identity) {\n        var id, canister, ecid, sender, submit, transformedRequest, body, _yield$Promise$all, _yield$Promise$all2, response, requestId;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(identity !== undefined)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 3;\n                return identity;\n\n              case 3:\n                _context2.t0 = _context2.sent;\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.next = 8;\n                return this._identity;\n\n              case 8:\n                _context2.t0 = _context2.sent;\n\n              case 9:\n                _context2.next = 11;\n                return _context2.t0;\n\n              case 11:\n                id = _context2.sent;\n                canister = Principal.from(canisterId);\n                ecid = options.effectiveCanisterId ? Principal.from(options.effectiveCanisterId) : canister;\n                sender = id.getPrincipal() || Principal.anonymous();\n                submit = {\n                  request_type: SubmitRequestType.Call,\n                  canister_id: canister,\n                  method_name: options.methodName,\n                  arg: options.arg,\n                  sender: sender,\n                  ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)\n                }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                _context2.next = 18;\n                return this._transform({\n                  request: {\n                    body: null,\n                    method: 'POST',\n                    headers: Object.assign({\n                      'Content-Type': 'application/cbor'\n                    }, this._credentials ? {\n                      Authorization: 'Basic ' + btoa(this._credentials)\n                    } : {})\n                  },\n                  endpoint: \"call\"\n                  /* Call */\n                  ,\n                  body: submit\n                });\n\n              case 18:\n                transformedRequest = _context2.sent;\n                _context2.next = 21;\n                return id.transformRequest(transformedRequest);\n\n              case 21:\n                transformedRequest = _context2.sent;\n                body = cbor.encode(transformedRequest.body); // Run both in parallel. The fetch is quite expensive, so we have plenty of time to\n                // calculate the requestId locally.\n\n                _context2.next = 25;\n                return Promise.all([this._fetch('' + new URL(\"/api/v2/canister/\".concat(ecid.toText(), \"/call\"), this._host), Object.assign(Object.assign({}, transformedRequest.request), {\n                  body: body\n                })), requestIdOf(submit)]);\n\n              case 25:\n                _yield$Promise$all = _context2.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                response = _yield$Promise$all2[0];\n                requestId = _yield$Promise$all2[1];\n\n                if (response.ok) {\n                  _context2.next = 39;\n                  break;\n                }\n\n                _context2.t1 = Error;\n                _context2.t2 = \"Server returned an error:\\n\" + \"  Code: \".concat(response.status, \" (\").concat(response.statusText, \")\\n\");\n                _context2.t3 = \"  Body: \";\n                _context2.next = 35;\n                return response.text();\n\n              case 35:\n                _context2.t4 = _context2.sent;\n                _context2.t5 = _context2.t3.concat.call(_context2.t3, _context2.t4, \"\\n\");\n                _context2.t6 = _context2.t2 + _context2.t5;\n                throw new _context2.t1(_context2.t6);\n\n              case 39:\n                return _context2.abrupt(\"return\", {\n                  requestId: requestId,\n                  response: {\n                    ok: response.ok,\n                    status: response.status,\n                    statusText: response.statusText\n                  }\n                });\n\n              case 40:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function call(_x, _x2, _x3) {\n        return _call.apply(this, arguments);\n      }\n\n      return call;\n    }()\n  }, {\n    key: \"query\",\n    value: function () {\n      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(canisterId, fields, identity) {\n        var id, canister, sender, request, transformedRequest, body, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(identity !== undefined)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 3;\n                return identity;\n\n              case 3:\n                _context3.t0 = _context3.sent;\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return this._identity;\n\n              case 8:\n                _context3.t0 = _context3.sent;\n\n              case 9:\n                _context3.next = 11;\n                return _context3.t0;\n\n              case 11:\n                id = _context3.sent;\n                canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n                sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous();\n                request = {\n                  request_type: \"query\"\n                  /* Query */\n                  ,\n                  canister_id: canister,\n                  method_name: fields.methodName,\n                  arg: fields.arg,\n                  sender: sender,\n                  ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)\n                }; // TODO: remove this any. This can be a Signed or UnSigned request.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                _context3.next = 17;\n                return this._transform({\n                  request: {\n                    method: 'POST',\n                    headers: Object.assign({\n                      'Content-Type': 'application/cbor'\n                    }, this._credentials ? {\n                      Authorization: 'Basic ' + btoa(this._credentials)\n                    } : {})\n                  },\n                  endpoint: \"read\"\n                  /* Query */\n                  ,\n                  body: request\n                });\n\n              case 17:\n                transformedRequest = _context3.sent;\n                _context3.next = 20;\n                return id.transformRequest(transformedRequest);\n\n              case 20:\n                transformedRequest = _context3.sent;\n                body = cbor.encode(transformedRequest.body);\n                _context3.next = 24;\n                return this._fetch('' + new URL(\"/api/v2/canister/\".concat(canister.toText(), \"/query\"), this._host), Object.assign(Object.assign({}, transformedRequest.request), {\n                  body: body\n                }));\n\n              case 24:\n                response = _context3.sent;\n\n                if (response.ok) {\n                  _context3.next = 35;\n                  break;\n                }\n\n                _context3.t1 = Error;\n                _context3.t2 = \"Server returned an error:\\n\" + \"  Code: \".concat(response.status, \" (\").concat(response.statusText, \")\\n\");\n                _context3.t3 = \"  Body: \";\n                _context3.next = 31;\n                return response.text();\n\n              case 31:\n                _context3.t4 = _context3.sent;\n                _context3.t5 = _context3.t3.concat.call(_context3.t3, _context3.t4, \"\\n\");\n                _context3.t6 = _context3.t2 + _context3.t5;\n                throw new _context3.t1(_context3.t6);\n\n              case 35:\n                _context3.t7 = cbor;\n                _context3.next = 38;\n                return response.arrayBuffer();\n\n              case 38:\n                _context3.t8 = _context3.sent;\n                return _context3.abrupt(\"return\", _context3.t7.decode.call(_context3.t7, _context3.t8));\n\n              case 40:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function query(_x4, _x5, _x6) {\n        return _query.apply(this, arguments);\n      }\n\n      return query;\n    }()\n  }, {\n    key: \"readState\",\n    value: function () {\n      var _readState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(canisterId, fields, identity) {\n        var canister, id, sender, transformedRequest, body, response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n\n                if (!(identity !== undefined)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return identity;\n\n              case 4:\n                _context4.t0 = _context4.sent;\n                _context4.next = 10;\n                break;\n\n              case 7:\n                _context4.next = 9;\n                return this._identity;\n\n              case 9:\n                _context4.t0 = _context4.sent;\n\n              case 10:\n                _context4.next = 12;\n                return _context4.t0;\n\n              case 12:\n                id = _context4.sent;\n                sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous(); // TODO: remove this any. This can be a Signed or UnSigned request.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                _context4.next = 16;\n                return this._transform({\n                  request: {\n                    method: 'POST',\n                    headers: Object.assign({\n                      'Content-Type': 'application/cbor'\n                    }, this._credentials ? {\n                      Authorization: 'Basic ' + btoa(this._credentials)\n                    } : {})\n                  },\n                  endpoint: \"read_state\"\n                  /* ReadState */\n                  ,\n                  body: {\n                    request_type: \"read_state\"\n                    /* ReadState */\n                    ,\n                    paths: fields.paths,\n                    sender: sender,\n                    ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)\n                  }\n                });\n\n              case 16:\n                transformedRequest = _context4.sent;\n                _context4.next = 19;\n                return id.transformRequest(transformedRequest);\n\n              case 19:\n                transformedRequest = _context4.sent;\n                body = cbor.encode(transformedRequest.body);\n                _context4.next = 23;\n                return this._fetch('' + new URL(\"/api/v2/canister/\".concat(canister, \"/read_state\"), this._host), Object.assign(Object.assign({}, transformedRequest.request), {\n                  body: body\n                }));\n\n              case 23:\n                response = _context4.sent;\n\n                if (response.ok) {\n                  _context4.next = 34;\n                  break;\n                }\n\n                _context4.t1 = Error;\n                _context4.t2 = \"Server returned an error:\\n\" + \"  Code: \".concat(response.status, \" (\").concat(response.statusText, \")\\n\");\n                _context4.t3 = \"  Body: \";\n                _context4.next = 30;\n                return response.text();\n\n              case 30:\n                _context4.t4 = _context4.sent;\n                _context4.t5 = _context4.t3.concat.call(_context4.t3, _context4.t4, \"\\n\");\n                _context4.t6 = _context4.t2 + _context4.t5;\n                throw new _context4.t1(_context4.t6);\n\n              case 34:\n                _context4.t7 = cbor;\n                _context4.next = 37;\n                return response.arrayBuffer();\n\n              case 37:\n                _context4.t8 = _context4.sent;\n                return _context4.abrupt(\"return\", _context4.t7.decode.call(_context4.t7, _context4.t8));\n\n              case 39:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function readState(_x7, _x8, _x9) {\n        return _readState.apply(this, arguments);\n      }\n\n      return readState;\n    }()\n  }, {\n    key: \"status\",\n    value: function () {\n      var _status = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var headers, response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                headers = this._credentials ? {\n                  Authorization: 'Basic ' + btoa(this._credentials)\n                } : {};\n                _context5.next = 3;\n                return this._fetch('' + new URL(\"/api/v2/status\", this._host), {\n                  headers: headers\n                });\n\n              case 3:\n                response = _context5.sent;\n\n                if (response.ok) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                _context5.t0 = Error;\n                _context5.t1 = \"Server returned an error:\\n\" + \"  Code: \".concat(response.status, \" (\").concat(response.statusText, \")\\n\");\n                _context5.t2 = \"  Body: \";\n                _context5.next = 10;\n                return response.text();\n\n              case 10:\n                _context5.t3 = _context5.sent;\n                _context5.t4 = _context5.t2.concat.call(_context5.t2, _context5.t3, \"\\n\");\n                _context5.t5 = _context5.t1 + _context5.t4;\n                throw new _context5.t0(_context5.t5);\n\n              case 14:\n                _context5.t6 = cbor;\n                _context5.next = 17;\n                return response.arrayBuffer();\n\n              case 17:\n                _context5.t7 = _context5.sent;\n                return _context5.abrupt(\"return\", _context5.t6.decode.call(_context5.t6, _context5.t7));\n\n              case 19:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function status() {\n        return _status.apply(this, arguments);\n      }\n\n      return status;\n    }()\n  }, {\n    key: \"fetchRootKey\",\n    value: function () {\n      var _fetchRootKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this._rootKeyFetched) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                _context6.next = 3;\n                return this.status();\n\n              case 3:\n                this.rootKey = _context6.sent.root_key;\n                this._rootKeyFetched = true;\n\n              case 5:\n                return _context6.abrupt(\"return\", this.rootKey);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function fetchRootKey() {\n        return _fetchRootKey.apply(this, arguments);\n      }\n\n      return fetchRootKey;\n    }()\n  }, {\n    key: \"_transform\",\n    value: function _transform(request) {\n      var p = Promise.resolve(request);\n\n      var _iterator = _createForOfIteratorHelper(this._pipeline),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var fn = _step.value;\n          p = p.then(function (r) {\n            return fn(r).then(function (r2) {\n              return r2 || r;\n            });\n          });\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return p;\n    }\n  }]);\n\n  return HttpAgent;\n}();","map":{"version":3,"sources":["../../../../src/agent/http/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Principal } from '@dfinity/principal';\nimport { AnonymousIdentity } from '../../auth';\nimport * as cbor from '../../cbor';\nimport { requestIdOf } from '../../request_id';\nimport { fromHex } from '../../utils/buffer';\nimport { Expiry } from './transforms';\nimport { SubmitRequestType, } from './types';\nexport * from './transforms';\nexport { makeNonce } from './types';\nexport var RequestStatusResponseStatus;\n(function (RequestStatusResponseStatus) {\n    RequestStatusResponseStatus[\"Received\"] = \"received\";\n    RequestStatusResponseStatus[\"Processing\"] = \"processing\";\n    RequestStatusResponseStatus[\"Replied\"] = \"replied\";\n    RequestStatusResponseStatus[\"Rejected\"] = \"rejected\";\n    RequestStatusResponseStatus[\"Unknown\"] = \"unknown\";\n    RequestStatusResponseStatus[\"Done\"] = \"done\";\n})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n// Root public key for the IC, encoded as hex\nconst IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n    'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n    '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n    'b01291091c5f87b98883463f98091a0baaae';\nfunction getDefaultFetch() {\n    const result = typeof window === 'undefined'\n        ? typeof global === 'undefined'\n            ? typeof self === 'undefined'\n                ? undefined\n                : self.fetch.bind(self)\n            : global.fetch.bind(global)\n        : window.fetch.bind(window);\n    if (!result) {\n        throw new Error('Could not find default `fetch` implementation.');\n    }\n    return result;\n}\n// A HTTP agent allows users to interact with a client of the internet computer\n// using the available methods. It exposes an API that closely follows the\n// public view of the internet computer, and is not intended to be exposed\n// directly to the majority of users due to its low-level interface.\n//\n// There is a pipeline to apply transformations to the request before sending\n// it to the client. This is to decouple signature, nonce generation and\n// other computations so that this class can stay as simple as possible while\n// allowing extensions.\nexport class HttpAgent {\n    constructor(options = {}) {\n        this.rootKey = fromHex(IC_ROOT_KEY);\n        this._pipeline = [];\n        this._rootKeyFetched = false;\n        if (options.source) {\n            if (!(options.source instanceof HttpAgent)) {\n                throw new Error(\"An Agent's source can only be another HttpAgent\");\n            }\n            this._pipeline = [...options.source._pipeline];\n            this._identity = options.source._identity;\n            this._fetch = options.source._fetch;\n            this._host = options.source._host;\n            this._credentials = options.source._credentials;\n        }\n        else {\n            this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n        }\n        if (options.host !== undefined) {\n            if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n                this._host = new URL(window.location.protocol + '//' + options.host);\n            }\n            else {\n                this._host = new URL(options.host);\n            }\n        }\n        else if (options.source !== undefined) {\n            // Safe to ignore here.\n            this._host = options.source._host;\n        }\n        else {\n            const location = typeof window !== 'undefined' ? window.location : undefined;\n            if (!location) {\n                throw new Error('Must specify a host to connect to.');\n            }\n            this._host = new URL(location + '');\n        }\n        if (options.credentials) {\n            const { name, password } = options.credentials;\n            this._credentials = `${name}${password ? ':' + password : ''}`;\n        }\n        this._identity = Promise.resolve(options.identity || new AnonymousIdentity());\n    }\n    addTransform(fn, priority = fn.priority || 0) {\n        // Keep the pipeline sorted at all time, by priority.\n        const i = this._pipeline.findIndex(x => (x.priority || 0) < priority);\n        this._pipeline.splice(i >= 0 ? i : this._pipeline.length, 0, Object.assign(fn, { priority }));\n    }\n    async getPrincipal() {\n        return (await this._identity).getPrincipal();\n    }\n    async call(canisterId, options, identity) {\n        const id = (await (identity !== undefined ? await identity : await this._identity));\n        const canister = Principal.from(canisterId);\n        const ecid = options.effectiveCanisterId\n            ? Principal.from(options.effectiveCanisterId)\n            : canister;\n        const sender = id.getPrincipal() || Principal.anonymous();\n        const submit = {\n            request_type: SubmitRequestType.Call,\n            canister_id: canister,\n            method_name: options.methodName,\n            arg: options.arg,\n            sender,\n            ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let transformedRequest = (await this._transform({\n            request: {\n                body: null,\n                method: 'POST',\n                headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),\n            },\n            endpoint: \"call\" /* Call */,\n            body: submit,\n        }));\n        // Apply transform for identity.\n        transformedRequest = await id.transformRequest(transformedRequest);\n        const body = cbor.encode(transformedRequest.body);\n        // Run both in parallel. The fetch is quite expensive, so we have plenty of time to\n        // calculate the requestId locally.\n        const [response, requestId] = await Promise.all([\n            this._fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), Object.assign(Object.assign({}, transformedRequest.request), { body })),\n            requestIdOf(submit),\n        ]);\n        if (!response.ok) {\n            throw new Error(`Server returned an error:\\n` +\n                `  Code: ${response.status} (${response.statusText})\\n` +\n                `  Body: ${await response.text()}\\n`);\n        }\n        return {\n            requestId,\n            response: {\n                ok: response.ok,\n                status: response.status,\n                statusText: response.statusText,\n            },\n        };\n    }\n    async query(canisterId, fields, identity) {\n        const id = await (identity !== undefined ? await identity : await this._identity);\n        const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n        const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous();\n        const request = {\n            request_type: \"query\" /* Query */,\n            canister_id: canister,\n            method_name: fields.methodName,\n            arg: fields.arg,\n            sender,\n            ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n        };\n        // TODO: remove this any. This can be a Signed or UnSigned request.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let transformedRequest = await this._transform({\n            request: {\n                method: 'POST',\n                headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),\n            },\n            endpoint: \"read\" /* Query */,\n            body: request,\n        });\n        // Apply transform for identity.\n        transformedRequest = await id.transformRequest(transformedRequest);\n        const body = cbor.encode(transformedRequest.body);\n        const response = await this._fetch('' + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), Object.assign(Object.assign({}, transformedRequest.request), { body }));\n        if (!response.ok) {\n            throw new Error(`Server returned an error:\\n` +\n                `  Code: ${response.status} (${response.statusText})\\n` +\n                `  Body: ${await response.text()}\\n`);\n        }\n        return cbor.decode(await response.arrayBuffer());\n    }\n    async readState(canisterId, fields, identity) {\n        const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n        const id = await (identity !== undefined ? await identity : await this._identity);\n        const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous();\n        // TODO: remove this any. This can be a Signed or UnSigned request.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let transformedRequest = await this._transform({\n            request: {\n                method: 'POST',\n                headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),\n            },\n            endpoint: \"read_state\" /* ReadState */,\n            body: {\n                request_type: \"read_state\" /* ReadState */,\n                paths: fields.paths,\n                sender,\n                ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n            },\n        });\n        // Apply transform for identity.\n        transformedRequest = await id.transformRequest(transformedRequest);\n        const body = cbor.encode(transformedRequest.body);\n        const response = await this._fetch('' + new URL(`/api/v2/canister/${canister}/read_state`, this._host), Object.assign(Object.assign({}, transformedRequest.request), { body }));\n        if (!response.ok) {\n            throw new Error(`Server returned an error:\\n` +\n                `  Code: ${response.status} (${response.statusText})\\n` +\n                `  Body: ${await response.text()}\\n`);\n        }\n        return cbor.decode(await response.arrayBuffer());\n    }\n    async status() {\n        const headers = this._credentials\n            ? {\n                Authorization: 'Basic ' + btoa(this._credentials),\n            }\n            : {};\n        const response = await this._fetch('' + new URL(`/api/v2/status`, this._host), { headers });\n        if (!response.ok) {\n            throw new Error(`Server returned an error:\\n` +\n                `  Code: ${response.status} (${response.statusText})\\n` +\n                `  Body: ${await response.text()}\\n`);\n        }\n        return cbor.decode(await response.arrayBuffer());\n    }\n    async fetchRootKey() {\n        if (!this._rootKeyFetched) {\n            // Hex-encoded version of the replica root key\n            this.rootKey = (await this.status()).root_key;\n            this._rootKeyFetched = true;\n        }\n        return this.rootKey;\n    }\n    _transform(request) {\n        let p = Promise.resolve(request);\n        for (const fn of this._pipeline) {\n            p = p.then(r => fn(r).then(r2 => r2 || r));\n        }\n        return p;\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}