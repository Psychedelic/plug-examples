{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tomasrocchi/Documents/fleek/plug-examples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Principal } from '@dfinity/principal';\nexport var ProxyMessageKind;\n\n(function (ProxyMessageKind) {\n  ProxyMessageKind[\"Error\"] = \"err\";\n  ProxyMessageKind[\"GetPrincipal\"] = \"gp\";\n  ProxyMessageKind[\"GetPrincipalResponse\"] = \"gpr\";\n  ProxyMessageKind[\"Query\"] = \"q\";\n  ProxyMessageKind[\"QueryResponse\"] = \"qr\";\n  ProxyMessageKind[\"Call\"] = \"c\";\n  ProxyMessageKind[\"CallResponse\"] = \"cr\";\n  ProxyMessageKind[\"ReadState\"] = \"rs\";\n  ProxyMessageKind[\"ReadStateResponse\"] = \"rsr\";\n  ProxyMessageKind[\"Status\"] = \"s\";\n  ProxyMessageKind[\"StatusResponse\"] = \"sr\";\n})(ProxyMessageKind || (ProxyMessageKind = {})); // A Stub Agent that forwards calls to another Agent implementation.\n\n\nexport var ProxyStubAgent = /*#__PURE__*/function () {\n  function ProxyStubAgent(_frontend, _agent) {\n    _classCallCheck(this, ProxyStubAgent);\n\n    this._frontend = _frontend;\n    this._agent = _agent;\n  }\n\n  _createClass(ProxyStubAgent, [{\n    key: \"onmessage\",\n    value: function onmessage(msg) {\n      var _this = this,\n          _this$_agent,\n          _this$_agent2,\n          _this$_agent3;\n\n      switch (msg.type) {\n        case ProxyMessageKind.GetPrincipal:\n          this._agent.getPrincipal().then(function (response) {\n            _this._frontend({\n              id: msg.id,\n              type: ProxyMessageKind.GetPrincipalResponse,\n              response: response.toText()\n            });\n          });\n\n          break;\n\n        case ProxyMessageKind.Query:\n          (_this$_agent = this._agent).query.apply(_this$_agent, _toConsumableArray(msg.args)).then(function (response) {\n            _this._frontend({\n              id: msg.id,\n              type: ProxyMessageKind.QueryResponse,\n              response: response\n            });\n          });\n\n          break;\n\n        case ProxyMessageKind.Call:\n          (_this$_agent2 = this._agent).call.apply(_this$_agent2, _toConsumableArray(msg.args)).then(function (response) {\n            _this._frontend({\n              id: msg.id,\n              type: ProxyMessageKind.CallResponse,\n              response: response\n            });\n          });\n\n          break;\n\n        case ProxyMessageKind.ReadState:\n          (_this$_agent3 = this._agent).readState.apply(_this$_agent3, _toConsumableArray(msg.args)).then(function (response) {\n            _this._frontend({\n              id: msg.id,\n              type: ProxyMessageKind.ReadStateResponse,\n              response: response\n            });\n          });\n\n          break;\n\n        case ProxyMessageKind.Status:\n          this._agent.status().then(function (response) {\n            _this._frontend({\n              id: msg.id,\n              type: ProxyMessageKind.StatusResponse,\n              response: response\n            });\n          });\n\n          break;\n\n        default:\n          throw new Error(\"Invalid message received: \".concat(JSON.stringify(msg)));\n      }\n    }\n  }]);\n\n  return ProxyStubAgent;\n}(); // An Agent that forwards calls to a backend. The calls are serialized\n\nexport var ProxyAgent = /*#__PURE__*/function () {\n  function ProxyAgent(_backend) {\n    _classCallCheck(this, ProxyAgent);\n\n    this._backend = _backend;\n    this._nextId = 0;\n    this._pendingCalls = new Map();\n    this.rootKey = null;\n  }\n\n  _createClass(ProxyAgent, [{\n    key: \"onmessage\",\n    value: function onmessage(msg) {\n      var id = msg.id;\n\n      var maybePromise = this._pendingCalls.get(id);\n\n      if (!maybePromise) {\n        throw new Error('A proxy get the same message twice...');\n      }\n\n      this._pendingCalls.delete(id);\n\n      var _maybePromise = _slicedToArray(maybePromise, 2),\n          resolve = _maybePromise[0],\n          reject = _maybePromise[1];\n\n      switch (msg.type) {\n        case ProxyMessageKind.Error:\n          return reject(msg.error);\n\n        case ProxyMessageKind.GetPrincipalResponse:\n        case ProxyMessageKind.CallResponse:\n        case ProxyMessageKind.QueryResponse:\n        case ProxyMessageKind.ReadStateResponse:\n        case ProxyMessageKind.StatusResponse:\n          return resolve(msg.response);\n\n        default:\n          throw new Error(\"Invalid message being sent to ProxyAgent: \".concat(JSON.stringify(msg)));\n      }\n    }\n  }, {\n    key: \"getPrincipal\",\n    value: function () {\n      var _getPrincipal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._sendAndWait({\n                  id: this._nextId++,\n                  type: ProxyMessageKind.GetPrincipal\n                }).then(function (principal) {\n                  if (typeof principal !== 'string') {\n                    throw new Error('Invalid principal received.');\n                  }\n\n                  return Principal.fromText(principal);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getPrincipal() {\n        return _getPrincipal.apply(this, arguments);\n      }\n\n      return getPrincipal;\n    }()\n  }, {\n    key: \"readState\",\n    value: function readState(canisterId, fields) {\n      return this._sendAndWait({\n        id: this._nextId++,\n        type: ProxyMessageKind.ReadState,\n        args: [canisterId.toString(), fields]\n      });\n    }\n  }, {\n    key: \"call\",\n    value: function call(canisterId, fields) {\n      return this._sendAndWait({\n        id: this._nextId++,\n        type: ProxyMessageKind.Call,\n        args: [canisterId.toString(), fields]\n      });\n    }\n  }, {\n    key: \"status\",\n    value: function status() {\n      return this._sendAndWait({\n        id: this._nextId++,\n        type: ProxyMessageKind.Status\n      });\n    }\n  }, {\n    key: \"query\",\n    value: function query(canisterId, fields) {\n      return this._sendAndWait({\n        id: this._nextId++,\n        type: ProxyMessageKind.Query,\n        args: [canisterId.toString(), fields]\n      });\n    }\n  }, {\n    key: \"_sendAndWait\",\n    value: function () {\n      var _sendAndWait2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(msg) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this2._pendingCalls.set(msg.id, [resolve, reject]);\n\n                  _this2._backend(msg);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function _sendAndWait(_x) {\n        return _sendAndWait2.apply(this, arguments);\n      }\n\n      return _sendAndWait;\n    }()\n  }, {\n    key: \"fetchRootKey\",\n    value: function () {\n      var _fetchRootKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var rootKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.status();\n\n              case 2:\n                rootKey = _context3.sent.root_key;\n                this.rootKey = rootKey;\n                return _context3.abrupt(\"return\", rootKey);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchRootKey() {\n        return _fetchRootKey.apply(this, arguments);\n      }\n\n      return fetchRootKey;\n    }()\n  }]);\n\n  return ProxyAgent;\n}();","map":{"version":3,"sources":["../../../src/agent/proxy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Principal } from '@dfinity/principal';\nexport var ProxyMessageKind;\n(function (ProxyMessageKind) {\n    ProxyMessageKind[\"Error\"] = \"err\";\n    ProxyMessageKind[\"GetPrincipal\"] = \"gp\";\n    ProxyMessageKind[\"GetPrincipalResponse\"] = \"gpr\";\n    ProxyMessageKind[\"Query\"] = \"q\";\n    ProxyMessageKind[\"QueryResponse\"] = \"qr\";\n    ProxyMessageKind[\"Call\"] = \"c\";\n    ProxyMessageKind[\"CallResponse\"] = \"cr\";\n    ProxyMessageKind[\"ReadState\"] = \"rs\";\n    ProxyMessageKind[\"ReadStateResponse\"] = \"rsr\";\n    ProxyMessageKind[\"Status\"] = \"s\";\n    ProxyMessageKind[\"StatusResponse\"] = \"sr\";\n})(ProxyMessageKind || (ProxyMessageKind = {}));\n// A Stub Agent that forwards calls to another Agent implementation.\nexport class ProxyStubAgent {\n    constructor(_frontend, _agent) {\n        this._frontend = _frontend;\n        this._agent = _agent;\n    }\n    onmessage(msg) {\n        switch (msg.type) {\n            case ProxyMessageKind.GetPrincipal:\n                this._agent.getPrincipal().then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.GetPrincipalResponse,\n                        response: response.toText(),\n                    });\n                });\n                break;\n            case ProxyMessageKind.Query:\n                this._agent.query(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.QueryResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.Call:\n                this._agent.call(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.CallResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.ReadState:\n                this._agent.readState(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.ReadStateResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.Status:\n                this._agent.status().then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.StatusResponse,\n                        response,\n                    });\n                });\n                break;\n            default:\n                throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n        }\n    }\n}\n// An Agent that forwards calls to a backend. The calls are serialized\nexport class ProxyAgent {\n    constructor(_backend) {\n        this._backend = _backend;\n        this._nextId = 0;\n        this._pendingCalls = new Map();\n        this.rootKey = null;\n    }\n    onmessage(msg) {\n        const id = msg.id;\n        const maybePromise = this._pendingCalls.get(id);\n        if (!maybePromise) {\n            throw new Error('A proxy get the same message twice...');\n        }\n        this._pendingCalls.delete(id);\n        const [resolve, reject] = maybePromise;\n        switch (msg.type) {\n            case ProxyMessageKind.Error:\n                return reject(msg.error);\n            case ProxyMessageKind.GetPrincipalResponse:\n            case ProxyMessageKind.CallResponse:\n            case ProxyMessageKind.QueryResponse:\n            case ProxyMessageKind.ReadStateResponse:\n            case ProxyMessageKind.StatusResponse:\n                return resolve(msg.response);\n            default:\n                throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n        }\n    }\n    async getPrincipal() {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.GetPrincipal,\n        }).then(principal => {\n            if (typeof principal !== 'string') {\n                throw new Error('Invalid principal received.');\n            }\n            return Principal.fromText(principal);\n        });\n    }\n    readState(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.ReadState,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    call(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Call,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    status() {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Status,\n        });\n    }\n    query(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Query,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    async _sendAndWait(msg) {\n        return new Promise((resolve, reject) => {\n            this._pendingCalls.set(msg.id, [resolve, reject]);\n            this._backend(msg);\n        });\n    }\n    async fetchRootKey() {\n        // Hex-encoded version of the replica root key\n        const rootKey = (await this.status()).root_key;\n        this.rootKey = rootKey;\n        return rootKey;\n    }\n}\n//# sourceMappingURL=proxy.js.map"]},"metadata":{},"sourceType":"module"}