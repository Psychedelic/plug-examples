{"ast":null,"code":"import { Principal } from '@dfinity/principal';\nexport var ProxyMessageKind;\n\n(function (ProxyMessageKind) {\n  ProxyMessageKind[\"Error\"] = \"err\";\n  ProxyMessageKind[\"GetPrincipal\"] = \"gp\";\n  ProxyMessageKind[\"GetPrincipalResponse\"] = \"gpr\";\n  ProxyMessageKind[\"Query\"] = \"q\";\n  ProxyMessageKind[\"QueryResponse\"] = \"qr\";\n  ProxyMessageKind[\"Call\"] = \"c\";\n  ProxyMessageKind[\"CallResponse\"] = \"cr\";\n  ProxyMessageKind[\"ReadState\"] = \"rs\";\n  ProxyMessageKind[\"ReadStateResponse\"] = \"rsr\";\n  ProxyMessageKind[\"Status\"] = \"s\";\n  ProxyMessageKind[\"StatusResponse\"] = \"sr\";\n})(ProxyMessageKind || (ProxyMessageKind = {})); // A Stub Agent that forwards calls to another Agent implementation.\n\n\nexport class ProxyStubAgent {\n  constructor(_frontend, _agent) {\n    this._frontend = _frontend;\n    this._agent = _agent;\n  }\n\n  onmessage(msg) {\n    switch (msg.type) {\n      case ProxyMessageKind.GetPrincipal:\n        this._agent.getPrincipal().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.GetPrincipalResponse,\n            response: response.toText()\n          });\n        });\n\n        break;\n\n      case ProxyMessageKind.Query:\n        this._agent.query(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.QueryResponse,\n            response\n          });\n        });\n\n        break;\n\n      case ProxyMessageKind.Call:\n        this._agent.call(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.CallResponse,\n            response\n          });\n        });\n\n        break;\n\n      case ProxyMessageKind.ReadState:\n        this._agent.readState(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.ReadStateResponse,\n            response\n          });\n        });\n\n        break;\n\n      case ProxyMessageKind.Status:\n        this._agent.status().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.StatusResponse,\n            response\n          });\n        });\n\n        break;\n\n      default:\n        throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n    }\n  }\n\n} // An Agent that forwards calls to a backend. The calls are serialized\n\nexport class ProxyAgent {\n  constructor(_backend) {\n    this._backend = _backend;\n    this._nextId = 0;\n    this._pendingCalls = new Map();\n    this.rootKey = null;\n  }\n\n  onmessage(msg) {\n    const id = msg.id;\n\n    const maybePromise = this._pendingCalls.get(id);\n\n    if (!maybePromise) {\n      throw new Error('A proxy get the same message twice...');\n    }\n\n    this._pendingCalls.delete(id);\n\n    const [resolve, reject] = maybePromise;\n\n    switch (msg.type) {\n      case ProxyMessageKind.Error:\n        return reject(msg.error);\n\n      case ProxyMessageKind.GetPrincipalResponse:\n      case ProxyMessageKind.CallResponse:\n      case ProxyMessageKind.QueryResponse:\n      case ProxyMessageKind.ReadStateResponse:\n      case ProxyMessageKind.StatusResponse:\n        return resolve(msg.response);\n\n      default:\n        throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n    }\n  }\n\n  async getPrincipal() {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.GetPrincipal\n    }).then(principal => {\n      if (typeof principal !== 'string') {\n        throw new Error('Invalid principal received.');\n      }\n\n      return Principal.fromText(principal);\n    });\n  }\n\n  readState(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.ReadState,\n      args: [canisterId.toString(), fields]\n    });\n  }\n\n  call(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Call,\n      args: [canisterId.toString(), fields]\n    });\n  }\n\n  status() {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Status\n    });\n  }\n\n  query(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Query,\n      args: [canisterId.toString(), fields]\n    });\n  }\n\n  async _sendAndWait(msg) {\n    return new Promise((resolve, reject) => {\n      this._pendingCalls.set(msg.id, [resolve, reject]);\n\n      this._backend(msg);\n    });\n  }\n\n  async fetchRootKey() {\n    // Hex-encoded version of the replica root key\n    const rootKey = (await this.status()).root_key;\n    this.rootKey = rootKey;\n    return rootKey;\n  }\n\n}","map":{"version":3,"sources":["../../../src/agent/proxy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Principal } from '@dfinity/principal';\nexport var ProxyMessageKind;\n(function (ProxyMessageKind) {\n    ProxyMessageKind[\"Error\"] = \"err\";\n    ProxyMessageKind[\"GetPrincipal\"] = \"gp\";\n    ProxyMessageKind[\"GetPrincipalResponse\"] = \"gpr\";\n    ProxyMessageKind[\"Query\"] = \"q\";\n    ProxyMessageKind[\"QueryResponse\"] = \"qr\";\n    ProxyMessageKind[\"Call\"] = \"c\";\n    ProxyMessageKind[\"CallResponse\"] = \"cr\";\n    ProxyMessageKind[\"ReadState\"] = \"rs\";\n    ProxyMessageKind[\"ReadStateResponse\"] = \"rsr\";\n    ProxyMessageKind[\"Status\"] = \"s\";\n    ProxyMessageKind[\"StatusResponse\"] = \"sr\";\n})(ProxyMessageKind || (ProxyMessageKind = {}));\n// A Stub Agent that forwards calls to another Agent implementation.\nexport class ProxyStubAgent {\n    constructor(_frontend, _agent) {\n        this._frontend = _frontend;\n        this._agent = _agent;\n    }\n    onmessage(msg) {\n        switch (msg.type) {\n            case ProxyMessageKind.GetPrincipal:\n                this._agent.getPrincipal().then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.GetPrincipalResponse,\n                        response: response.toText(),\n                    });\n                });\n                break;\n            case ProxyMessageKind.Query:\n                this._agent.query(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.QueryResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.Call:\n                this._agent.call(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.CallResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.ReadState:\n                this._agent.readState(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.ReadStateResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.Status:\n                this._agent.status().then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.StatusResponse,\n                        response,\n                    });\n                });\n                break;\n            default:\n                throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n        }\n    }\n}\n// An Agent that forwards calls to a backend. The calls are serialized\nexport class ProxyAgent {\n    constructor(_backend) {\n        this._backend = _backend;\n        this._nextId = 0;\n        this._pendingCalls = new Map();\n        this.rootKey = null;\n    }\n    onmessage(msg) {\n        const id = msg.id;\n        const maybePromise = this._pendingCalls.get(id);\n        if (!maybePromise) {\n            throw new Error('A proxy get the same message twice...');\n        }\n        this._pendingCalls.delete(id);\n        const [resolve, reject] = maybePromise;\n        switch (msg.type) {\n            case ProxyMessageKind.Error:\n                return reject(msg.error);\n            case ProxyMessageKind.GetPrincipalResponse:\n            case ProxyMessageKind.CallResponse:\n            case ProxyMessageKind.QueryResponse:\n            case ProxyMessageKind.ReadStateResponse:\n            case ProxyMessageKind.StatusResponse:\n                return resolve(msg.response);\n            default:\n                throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n        }\n    }\n    async getPrincipal() {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.GetPrincipal,\n        }).then(principal => {\n            if (typeof principal !== 'string') {\n                throw new Error('Invalid principal received.');\n            }\n            return Principal.fromText(principal);\n        });\n    }\n    readState(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.ReadState,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    call(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Call,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    status() {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Status,\n        });\n    }\n    query(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Query,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    async _sendAndWait(msg) {\n        return new Promise((resolve, reject) => {\n            this._pendingCalls.set(msg.id, [resolve, reject]);\n            this._backend(msg);\n        });\n    }\n    async fetchRootKey() {\n        // Hex-encoded version of the replica root key\n        const rootKey = (await this.status()).root_key;\n        this.rootKey = rootKey;\n        return rootKey;\n    }\n}\n//# sourceMappingURL=proxy.js.map"]},"metadata":{},"sourceType":"module"}