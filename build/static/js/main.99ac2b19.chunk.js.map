{"version":3,"sources":["idls/nns-minting.did.js","App.js","idls/dip20.did.js","idls/coinflip.did.js","BatchTransactions/index.js","utils.js","reportWebVitals.js","index.js","idls/xtc.did.js","idls/ext.did.js","idls/nns_ledger.did.js"],"names":["IDL","SetAuthorizedSubnetworkListArgs","Record","Opt","Principal","Vec","ICPTs","Nat64","TransactionNotification","Nat8","CyclesResponse","Variant","Tuple","Text","Null","Result","Service","Func","XTC_CANISTER_ID","STARVERSE_CID","NNS_MINTING_CID","NNS_LEDGER_CID","BOX_CANISTER_ID","WHITELIST","Buffer","alloc","CYCLES_PER_TC","E8S_PER_ICP","App","useState","to","setTo","amount","setAmount","connected","setConnected","principal","setPrincipal","nftIndex","setNFTIndex","useEffect","getBalance","a","window","ic","plug","createActor","canisterId","interfaceFactory","XtcIDL","actor","balanceOf","fromText","principalId","balance","console","log","getMyBalance","response","alert","getAllBalances","requestBalance","requestTransfer","requestBoxTransfer","dip20IDL","transfer","BigInt","safeXTCTransfer","transferErc20","unsafeXTCTransfer","Actor","agent","from","safeICPTransfer","nns_ledgerDid","send_dfx","getAccountId","fee","e8s","memo","RandomBigInt","from_subaccount","created_at_time","unsafeICPTransfer","safeNFTTransfer","ExtIDL","getPrincipal","getTokenIdentifier","Array","fill","token","notify","subaccount","unsafeNFTTransfer","safeNFTLock","lock","safeCanisterCall","nnsMintingDid","to_subaccount","block_height","transaction_notification","unsafeCanisterCall","className","dark","onConnectCallback","toString","whitelist","ype","onClick","ua","navigator","userAgent","isAndroid","test","clientRPC","WalletConnectRPC","plugProvider","Provider","requestConnect","then","htmlFor","name","type","onChange","e","target","value","disabled","TxError","Nat","Metadata","TokenInfo","Bool","Profile","Nat32","TRANSFER_XTC_TX","idl","methodName","args","onSuccess","res","onFail","TRANSFER_STARVERSE_TX","TRANSFER_ICP_TX","FLIP_TRANSACTION","flip","CoinflipIDL","BatchTransactionsExample","tripleFlipIt","tripleFlip","map","_","index","batchTransactions","randomTx","SUB_ACCOUNT_ZERO","wordToByteArray","word","length","byteArray","push","generateChecksum","hash","val","Number","padStart","byteArrayToWordArray","i","wordArray","CryptoJS","lib","WordArray","create","subAccount","sha","algo","SHA224","update","toUint8Array","subBuffer","writeUInt32BE","finalize","hasOwnProperty","sigBytes","words","bytes","result","Math","min","concat","apply","wordArrayToByteArray","canister","padding","array","Uint8Array","num","b","ArrayBuffer","DataView","setUint32","to32bits","fromUint8Array","toText","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","TxReceipt","TransactionId","BurnError","BurnResult","TransactionStatus","EventDetail","Event","EventsConnection","Operation","Time","Int","TxRecord","MintError","MintResult","Stats","ResultCall","CreateResult","ResultSend","Nat16","SubAccount","SubAccount_3","TokenIndex","AccountIdentifier","AccountIdentifier_3","Settlement","TokenIdentifier","User","BalanceRequest","Balance","CommonError_2","BalanceResponse","TokenIdentifier_2","CommonError","Result_7","Listing","Result_9","User_2","Extension","Wearable","HeaderField","HttpRequest","HttpResponse","Result_8","ListRequest","Result_5","Result_6","MintRequest","Balance_2","Result_4","Result_3","Result_2","Transaction2","Memo","TransferRequest","TransferResponse","Duration","ArchiveOptions","AccountBalanceArgs","CanisterId","BlockHeight","NotifyCanisterArgs","TimeStamp","SendArgs"],"mappings":"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","file":"static/js/main.99ac2b19.chunk.js","sourcesContent":["export default ({ IDL }) => {\n  const SetAuthorizedSubnetworkListArgs = IDL.Record({\n    'who' : IDL.Opt(IDL.Principal),\n    'subnets' : IDL.Vec(IDL.Principal),\n  });\n  const ICPTs = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TransactionNotification = IDL.Record({\n    'to' : IDL.Principal,\n    'to_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from' : IDL.Principal,\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'amount' : ICPTs,\n    'block_height' : IDL.Nat64,\n  });\n  const CyclesResponse = IDL.Variant({\n    'Refunded' : IDL.Tuple(IDL.Text, IDL.Opt(IDL.Nat64)),\n    'CanisterCreated' : IDL.Principal,\n    'ToppedUp' : IDL.Null,\n  });\n  const Result = IDL.Variant({ 'Ok' : CyclesResponse, 'Err' : IDL.Text });\n  return IDL.Service({\n    'set_authorized_subnetwork_list' : IDL.Func(\n        [SetAuthorizedSubnetworkListArgs],\n        [],\n        [],\n      ),\n    'transaction_notification' : IDL.Func(\n        [TransactionNotification],\n        [Result],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => { return []; };","import React, { useEffect, useState } from 'react';\nimport PlugConnect from '@psychedelic/plug-connect';\nimport { Principal } from '@dfinity/principal';\nimport { Actor } from '@dfinity/agent';\nimport RandomBigInt from 'random-bigint';\nimport {\n  Provider,\n  WalletConnectRPC,\n} from '@psychedelic/plug-inpage-provider';\n\nimport XtcIDL from './idls/xtc.did';\nimport ExtIDL from './idls/ext.did';\nimport dip20IDL from './idls/dip20.did';\nimport './App.css';\nimport nnsMintingDid from './idls/nns-minting.did';\nimport BatchTransactions from './BatchTransactions';\nimport nns_ledgerDid from './idls/nns_ledger.did';\nimport { getAccountId, getTokenIdentifier } from './utils';\n\nexport const XTC_CANISTER_ID = 'aanaa-xaaaa-aaaah-aaeiq-cai';\nexport const STARVERSE_CID = 'nbg4r-saaaa-aaaah-qap7a-cai';\nexport const NNS_MINTING_CID = 'rkp4c-7iaaa-aaaaa-aaaca-cai';\nexport const NNS_LEDGER_CID = 'ryjl3-tyaaa-aaaaa-aaaba-cai';\nexport const COINFLIP_CANISTER_ID = '24pmb-qiaaa-aaaah-aannq-cai';\nexport const BOX_CANISTER_ID = 'lzvjb-wyaaa-aaaam-qarua-cai';\n\n// Subaccounts are arbitrary 32-byte values.\nexport const SUB_ACCOUNT_ZERO = Buffer.alloc(32);\n\nconst WHITELIST = [XTC_CANISTER_ID, STARVERSE_CID, NNS_MINTING_CID, COINFLIP_CANISTER_ID, NNS_LEDGER_CID, BOX_CANISTER_ID];\n\nconst CYCLES_PER_TC = 1_000_000_000_000;\nconst E8S_PER_ICP = 100_000_000;\n\nfunction App() {\n  const [to, setTo] = useState();\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [principal, setPrincipal] = useState(\"\");\n  const [nftIndex, setNFTIndex] = useState(0);\n  const [xtcBalance, setXtcBalance] = useState(0);\n\n  const handleChangeTo = e => setTo(e.target.value);\n  const handleChangeAmount = e => setAmount(e.target.value);\n  const handleChangeIndex = e => setNFTIndex(e.target.value);\n\n  useEffect(() => {\n    const getBalance = async () => {\n      const actor = await window.ic.plug.createActor({ canisterId: XTC_CANISTER_ID, interfaceFactory: XtcIDL });\n      const balance = await actor.balanceOf(Principal.fromText(window.ic.plug.principalId));\n      console.log(`XTC balance of ${window.ic.plug.principalId}: ${balance}`);\n    }\n\n    if (connected) {\n      getBalance();\n    }\n  }, [connected]);\n\n  const customHandleConnect = () => {\n    const ua = navigator.userAgent;\n    const isAndroid = !!/android/i.test(ua);\n    console.log('CUSTOM HANDLE CONNECT', isAndroid);\n\n    const clientRPC = new WalletConnectRPC(window);\n\n    const plugProvider = new Provider(clientRPC);\n\n    const ic = window.ic || {};\n    window.ic = {\n      ...ic,\n      plug: plugProvider,\n    };\n\n    plugProvider.requestConnect({ whitelist: WHITELIST }).then(() => {\n      setConnected(true)\n      setPrincipal(window.ic.plug.principalId.toString())\n    });\n  }\n\n  const getMyBalance = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: XTC_CANISTER_ID, interfaceFactory: XtcIDL });\n    // request a transfer using this actor\n    const response = await actor.balanceOf(Principal.fromText(window.ic.plug.principalId));\n    console.log('response', response);\n    alert('response', response);\n  }\n\n  const getAllBalances = async () => {\n    // create an actor to interact with XTC\n    const response = await window.ic.plug.requestBalance();\n    // request a transfer using this actor\n    console.log('response', response);\n  }\n\n  const requestTransfer = async () => {\n    const response = await window.ic.plug.requestTransfer({ to, amount: 10000 })\n\n    console.log('response', response);\n  }\n\n  const requestBoxTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: BOX_CANISTER_ID, interfaceFactory: dip20IDL });\n    // request a transfer using this actor\n    const response = await actor.transfer(Principal.fromText(to), BigInt(1000));\n    console.log('response', response);\n  }\n\n\n  const safeXTCTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: XTC_CANISTER_ID, interfaceFactory: XtcIDL });\n    // request a transfer using this actor\n    const response = await actor.transferErc20(Principal.fromText(to), BigInt(amount * CYCLES_PER_TC));\n    console.log('response', response);\n  }\n\n  const unsafeXTCTransfer = async () => {\n    const actor = await Actor.createActor(XtcIDL, {\n      agent: window.ic.plug.agent,\n      canisterId: XTC_CANISTER_ID,\n    });\n    const response = await actor.transfer({ to: Principal.fromText(to), amount: BigInt(amount * CYCLES_PER_TC), from: [] });\n    console.log('response', response);\n  }\n\n\n  const safeICPTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: NNS_LEDGER_CID, interfaceFactory: nns_ledgerDid });\n\n    console.log('actor ->', actor);\n    // request a transfer using this actor\n    const response = await actor.send_dfx({\n      to: getAccountId(Principal.from(to)),\n      fee: { e8s: BigInt(10000) },\n      amount: { e8s: BigInt(amount) },\n      memo: RandomBigInt(32),\n      from_subaccount: [], // For now, using default subaccount to handle ICP\n      created_at_time: [],\n    }); console.log('response', response);\n  }\n\n  const unsafeICPTransfer = async () => {\n    const actor = await Actor.createActor(nns_ledgerDid, {\n      agent: window.ic.plug.agent,\n      canisterId: NNS_LEDGER_CID,\n    });\n    const response = await actor.send_dfx({\n      to: getAccountId(Principal.from(to)),\n      fee: { e8s: BigInt(10000) },\n      amount: { e8s: BigInt(amount) },\n      memo: RandomBigInt(32),\n      from_subaccount: [], // For now, using default subaccount to handle ICP\n      created_at_time: [],\n    });\n    console.log('response', response);\n  }\n\n\n  const safeNFTTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: STARVERSE_CID, interfaceFactory: ExtIDL });\n    // request a transfer using this actor\n    const response = await actor.transfer({\n      to: { principal: Principal.from(to) },\n      from: { principal: await window.ic.plug.agent.getPrincipal() },\n      token: getTokenIdentifier(STARVERSE_CID, nftIndex),\n      amount: BigInt(1),\n      memo: new Array(32).fill(0),\n      notify: false,\n      subaccount: [],\n    });\n    console.log('response', response);\n  };\n\n  const unsafeNFTTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await Actor.createActor(ExtIDL, {\n      agent: window.ic.plug.agent,\n      canisterId: STARVERSE_CID,\n    });\n    // request a transfer using this actor\n    const response = await actor.transfer({\n      to: { principal: Principal.from(to) },\n      from: { principal: await window.ic.plug.agent.getPrincipal() },\n      token: getTokenIdentifier(STARVERSE_CID, nftIndex),\n      amount: BigInt(1),\n      memo: new Array(32).fill(0),\n      notify: false,\n      subaccount: [],\n    });\n    console.log('response', response);\n  };\n\n  const safeNFTLock = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: STARVERSE_CID, interfaceFactory: ExtIDL });\n    // request a transfer using this actor\n    const response = await actor.lock(\n      getTokenIdentifier(STARVERSE_CID, nftIndex),\n      BigInt(1),\n      getAccountId(Principal.from(to)),\n      []\n    );\n    console.log('response', response);\n  };\n\n  // const unsafeNFTTransfer = async () => {\n  //   // create an actor to interact with XTC\n  //   const actor = await Actor.createActor(ExtIDL, {\n  //     agent: window.ic.plug.agent,\n  //     canisterId: STARVERSE_CID,\n  //   });\n  //   // request a transfer using this actor\n  //   const response = await actor.transfer({\n  //     to: { principal: Principal.from(to) },\n  //     from: { principal: await window.ic.plug.agent.getPrincipal() },\n  //     token: getTokenIdentifier(STARVERSE_CID, nftIndex),\n  //     amount: BigInt(1),\n  //     memo: new Array(32).fill(0),\n  //     notify: false,\n  //     subaccount: [],\n  //   });\n  //   console.log('response', response);\n  // };\n\n\n  const safeCanisterCall = async () => {\n    const actor = await window.ic.plug.createActor({ canisterId: NNS_MINTING_CID, interfaceFactory: nnsMintingDid });\n    // request a transfer using this actor\n    const response = await actor.transaction_notification({\n      to: Principal.from(to),\n      from: await window.ic.plug.agent.getPrincipal(),\n      amount: { e8s: BigInt(amount * E8S_PER_ICP) },\n      memo: BigInt(100),\n      notify: false,\n      to_subaccount: [],\n      from_subaccount: [],\n      block_height: BigInt(100),\n    });\n    console.log('response', response);\n  }\n\n  const unsafeCanisterCall = async () => {\n    const actor = await Actor.createActor(nnsMintingDid, {\n      agent: window.ic.plug.agent,\n      canisterId: NNS_MINTING_CID,\n    });\n    // request a transfer using this actor\n    const response = await actor.transaction_notification({\n      to: Principal.from(to),\n      from: await window.ic.plug.agent.getPrincipal(),\n      amount: { e8s: BigInt(amount * E8S_PER_ICP) },\n      memo: BigInt(100),\n      notify: false,\n      to_subaccount: [],\n      from_subaccount: [],\n      block_height: BigInt(100),\n    });\n    console.log('response', response);\n  }\n\n  return (\n    <div className=\"flex column center\">\n      <h1>Plug Examples</h1>\n      <h2>Security Example</h2>\n      <div className=\"plug-button\">\n        {connected ? (<h3>{`Connected to plug ${principal}`}</h3>) : (\n          <>\n            <PlugConnect\n              dark\n              onConnectCallback={() => {\n                setConnected(true)\n                setPrincipal(window.ic.plug.principalId.toString())\n              }} whitelist={WHITELIST}\n            // timeout={5000}\n            />\n            <button ype=\"button\" onClick={customHandleConnect}>{`CUSTOM CONNECT`}</button>\n\n\n          </>\n\n        )}\n      </div>\n      {connected && (\n        <>\n          <div className=\"flex column input-container\">\n            <label htmlFor=\"to\">Recipient principal</label>\n            <input name=\"to\" type=\"text\" onChange={handleChangeTo} value={to} />\n          </div>\n          <div className=\"flex column input-container\">\n            <label htmlFor=\"to\">Amount of XTC</label>\n            <input name=\"to\" type=\"number\" onChange={handleChangeAmount} value={amount} />\n          </div>\n          <div className=\"flex column input-container\">\n            <label htmlFor=\"to\">Starverse Index</label>\n            <input name=\"to\" type=\"number\" onChange={handleChangeIndex} value={nftIndex} />\n          </div>\n          <div className=\"security-actions-container flex column\">\n            <h3>Queries</h3>\n            <button type=\"button\" onClick={getMyBalance}>{`Get XTC Balance USING ACTOR`}</button>\n            <button type=\"button\" onClick={getAllBalances}>{`Get ALL Balance USING PROVIDER`}</button>\n\n          </div>\n\n\n          <div className=\"security-actions-container flex column\">\n            <h3>Safe Calls</h3>\n            <button disabled={!to} type=\"button\" onClick={requestTransfer}>{`Transfer 0,0001 ICP`}</button>\n            <button disabled={!to} type=\"button\" onClick={requestBoxTransfer}>{`Transfer Box`}</button>\n            <button disabled={!to} type=\"button\" onClick={safeXTCTransfer}>{`Transfer ${amount} XTC (${CYCLES_PER_TC * amount} cycles)`}</button>\n            <button disabled={!to} type=\"button\" onClick={safeNFTTransfer}>{`Transfer Starverse #${nftIndex}`}</button>\n            <button disabled={!to} type=\"button\" onClick={safeNFTLock}>{`Lock Starverse #${nftIndex}`}</button>\n            <button disabled={!to} type=\"button\" onClick={safeICPTransfer}>{`Transfer ${amount} e8s`}</button>\n            <button disabled={!to} type=\"button\" onClick={safeCanisterCall}>Call NNS Minting Canister</button>\n          </div>\n          <div className=\"security-actions-container\">\n            <h3>Unsafe Calls</h3>\n            <button disabled={!to} type=\"button\" onClick={unsafeXTCTransfer}>{`Transfer 0.000001 XTC (1000 cycles)`}</button>\n            <button disabled={!to} type=\"button\" onClick={unsafeICPTransfer}>{`Transfer ${amount} e8s`}</button>\n            <button disabled={!to} type=\"button\" onClick={unsafeNFTTransfer}>Transfer NFT</button>\n            <button disabled={!to} type=\"button\" onClick={unsafeCanisterCall}>Call NNS Minting Canister</button>\n          </div>\n          <BatchTransactions />\n        </>\n      )}\n\n    </div>\n  );\n}\n\nexport default App;\n","export default ({ IDL }) => {\n    const TxError = IDL.Variant({\n        'InsufficientAllowance': IDL.Null,\n        'InsufficientBalance': IDL.Null,\n        'ErrorOperationStyle': IDL.Null,\n        'Unauthorized': IDL.Null,\n        'LedgerTrap': IDL.Null,\n        'ErrorTo': IDL.Null,\n        'Other': IDL.Null,\n        'BlockUsed': IDL.Null,\n        'AmountTooSmall': IDL.Null,\n    });\n    const Result = IDL.Variant({ 'Ok': IDL.Nat, 'Err': TxError });\n    const Metadata = IDL.Record({\n        'fee': IDL.Nat,\n        'decimals': IDL.Nat8,\n        'owner': IDL.Principal,\n        'logo': IDL.Text,\n        'name': IDL.Text,\n        'totalSupply': IDL.Nat,\n        'symbol': IDL.Text,\n    });\n    const TokenInfo = IDL.Record({\n        'holderNumber': IDL.Nat64,\n        'deployTime': IDL.Nat64,\n        'metadata': Metadata,\n        'historySize': IDL.Nat64,\n        'cycles': IDL.Nat64,\n        'feeTo': IDL.Principal,\n    });\n    return IDL.Service({\n        'allowance': IDL.Func(\n            [IDL.Principal, IDL.Principal],\n            [IDL.Nat],\n            ['query'],\n        ),\n        'approve': IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n        'balanceOf': IDL.Func([IDL.Principal], [IDL.Nat], ['query']),\n        'decimals': IDL.Func([], [IDL.Nat8], ['query']),\n        'getAllowanceSize': IDL.Func([], [IDL.Nat64], ['query']),\n        'getBlockUsed': IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\n        'getHolders': IDL.Func(\n            [IDL.Nat64, IDL.Nat64],\n            [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\n            ['query'],\n        ),\n        'getMetadata': IDL.Func([], [Metadata], ['query']),\n        'getTokenInfo': IDL.Func([], [TokenInfo], ['query']),\n        'getUserApprovals': IDL.Func(\n            [IDL.Principal],\n            [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\n            ['query'],\n        ),\n        'historySize': IDL.Func([], [IDL.Nat64], ['query']),\n        'isBlockUsed': IDL.Func([IDL.Nat64], [IDL.Bool], ['query']),\n        'logo': IDL.Func([], [IDL.Text], ['query']),\n        'mint': IDL.Func([IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64], [Result], []),\n        'mintFor': IDL.Func(\n            [IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64, IDL.Principal],\n            [Result],\n            [],\n        ),\n        'name': IDL.Func([], [IDL.Text], ['query']),\n        'owner': IDL.Func([], [IDL.Principal], ['query']),\n        'setFee': IDL.Func([IDL.Nat], [], []),\n        'setFeeTo': IDL.Func([IDL.Principal], [], []),\n        'setGenesis': IDL.Func([], [Result], []),\n        'setLogo': IDL.Func([IDL.Text], [], []),\n        'setName': IDL.Func([IDL.Text], [], []),\n        'setOwner': IDL.Func([IDL.Principal], [], []),\n        'symbol': IDL.Func([], [IDL.Text], ['query']),\n        'totalSupply': IDL.Func([], [IDL.Nat], ['query']),\n        'transfer': IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n        'transferFrom': IDL.Func(\n            [IDL.Principal, IDL.Principal, IDL.Nat],\n            [Result],\n            [],\n        ),\n        'withdraw': IDL.Func([IDL.Nat64, IDL.Text], [Result], []),\n    });\n};\nexport const init = ({ IDL }) => {\n    return [\n        IDL.Text,\n        IDL.Text,\n        IDL.Text,\n        IDL.Nat8,\n        IDL.Nat,\n        IDL.Principal,\n        IDL.Nat,\n        IDL.Principal,\n        IDL.Principal,\n    ];\n};\n","export default ({ IDL }) => {\n  const Profile_2 = IDL.Record({\n    'principal' : IDL.Text,\n    'attempts' : IDL.Nat32,\n    'score' : IDL.Nat32,\n    'ratio' : IDL.Nat32,\n  });\n  const Profile = Profile_2;\n  return IDL.Service({\n    'coinFlip' : IDL.Func([IDL.Bool], [IDL.Bool], []),\n    'get' : IDL.Func([IDL.Text], [Profile], ['query']),\n    'getRank' : IDL.Func([], [IDL.Opt(IDL.Nat64)], ['query']),\n    'getSelf' : IDL.Func([], [Profile], ['query']),\n    'leaderboard' : IDL.Func([], [IDL.Vec(Profile)], ['query']),\n  });\n};\nexport const init = ({ IDL }) => { return []; };","import { Principal } from '@dfinity/principal';\nimport React from 'react';\nimport RandomBigInt from 'random-bigint';\nimport { getAccountId, getTokenIdentifier } from '../utils';\nimport CoinflipIDL from '../idls/coinflip.did';\nimport XtcIDL from '../idls/xtc.did';\nimport ExtIDL from '../idls/ext.did';\nimport nns_ledgerDid from '../idls/nns_ledger.did';\n\nexport const XTC_CANISTER_ID = 'aanaa-xaaaa-aaaah-aaeiq-cai';\nexport const STARVERSE_CID = 'nbg4r-saaaa-aaaah-qap7a-cai';\nexport const NNS_MINTING_CID = 'rkp4c-7iaaa-aaaaa-aaaca-cai';\nexport const NNS_LEDGER_CID = 'ryjl3-tyaaa-aaaaa-aaaba-cai';\n\nconst COINFLIP_CANISTER_ID = '24pmb-qiaaa-aaaah-aannq-cai';\n\nconst TRANSFER_XTC_TX = {\n  idl: XtcIDL,\n  canisterId: XTC_CANISTER_ID,\n  methodName: 'transfer',\n  args: [{ to: Principal.fromText('xksyk-jrty5-s6ei6-k3cak-wb2mv-5rtv5-atxvn-gnqsm-i6kuh-irkqa-4ae'), amount: BigInt(1400000), from: [] }],\n  onSuccess: async (res) => {\n    console.log('transferred xtc successfully');\n  },\n  onFail: (res) => {\n    console.log('transfer xtc error', res);\n  },\n};\n\nconst TRANSFER_STARVERSE_TX = {\n  idl: ExtIDL,\n  canisterId: STARVERSE_CID,\n  methodName: 'transfer',\n  args: [{\n    to: { principal: Principal.from('6cm3n-tcbbt-oywdv-hpf2y-7ltfa-gvf7z-cfgaj-4j33n-lqutr-yzwuz-hqe') },\n    from: { principal: Principal.from('xksyk-jrty5-s6ei6-k3cak-wb2mv-5rtv5-atxvn-gnqsm-i6kuh-irkqa-4ae') },\n    token: getTokenIdentifier(STARVERSE_CID, 420),\n    amount: BigInt(1),\n    memo: new Array(32).fill(0),\n    notify: false,\n    subaccount: [],\n  }],\n  onSuccess: async (res) => {\n    console.log('transferred starverse successfully');\n  },\n  onFail: (res) => {\n    console.log('transfer starverse error', res);\n  },\n};\n\nconst TRANSFER_ICP_TX = {\n  idl: nns_ledgerDid,\n  canisterId: NNS_LEDGER_CID,\n  methodName: 'send_dfx',\n  args: [{\n    to: getAccountId(Principal.from('6cm3n-tcbbt-oywdv-hpf2y-7ltfa-gvf7z-cfgaj-4j33n-lqutr-yzwuz-hqe')),\n    fee: { e8s: BigInt(10000) },\n    amount: { e8s: BigInt(1000000) },\n    memo: RandomBigInt(32),\n    from_subaccount: [], // For now, using default subaccount to handle ICP\n    created_at_time: [],\n  }],\n  onSuccess: async (res) => {\n    console.log('transferred starverse successfully');\n  },\n  onFail: (res) => {\n    console.log('transfer starverse error', res);\n  },\n};\n\nconst FLIP_TRANSACTION = (flip) => ({\n  idl: CoinflipIDL,\n  canisterId: COINFLIP_CANISTER_ID,\n  methodName: 'coinFlip',\n  args: [true],\n  onSuccess: async (res) => {\n    console.log('flipped coin ', flip, 'successfully');\n    alert('coinflip response', res);\n  },\n  onFail: (res) => {\n    console.log('coinflip error', res);\n  },\n});\n\nconst BatchTransactionsExample = () => {\n  const tripleFlipIt = async () => {\n    console.log('Flipping it three times!');\n    const tripleFlip = new Array(3).fill(null).map((_, index) => FLIP_TRANSACTION(index));\n    await window.ic.plug.batchTransactions(tripleFlip)\n    alert('flipped all coins!');\n  };\n  const randomTx = async () => {\n    console.log('Doing a bunch of tx');\n    await window.ic.plug.batchTransactions([TRANSFER_XTC_TX, TRANSFER_ICP_TX, TRANSFER_STARVERSE_TX, FLIP_TRANSACTION(1)])\n    console.log('Done!');\n  }\n  return (\n    <div className=\"batch-transactions-container\">\n      <h2>Batch Transactions Example</h2>\n      <button type=\"button\" onClick={tripleFlipIt}>Triple Flip</button>\n      <button type=\"button\" onClick={randomTx}>Random Transactions</button>\n    </div>\n  )\n}\nexport default BatchTransactionsExample;\n","import { Principal } from '@dfinity/principal';\n\nimport CryptoJS from 'crypto-js';\n// import crc32 from 'buffer-crc32';\n\n\n// Dfinity Account separator\nexport const ACCOUNT_DOMAIN_SEPERATOR = '\\x0Aaccount-id';\n// Subaccounts are arbitrary 32-byte values.\nexport const SUB_ACCOUNT_ZERO = Buffer.alloc(32);\n\nexport const wordToByteArray = (word, length) => {\n  const byteArray = [];\n  const xFF = 0xff;\n  if (length > 0) byteArray.push(word >>> 24);\n  if (length > 1) byteArray.push((word >>> 16) & xFF);\n  if (length > 2) byteArray.push((word >>> 8) & xFF);\n  if (length > 3) byteArray.push(word & xFF);\n\n  return byteArray;\n};\n\nexport const wordArrayToByteArray = (wordArray, length) => {\n  if (\n    wordArray.hasOwnProperty('sigBytes') &&\n    wordArray.hasOwnProperty('words')\n  ) {\n    length = wordArray.sigBytes;\n    wordArray = wordArray.words;\n  }\n\n  let result = [];\n  let bytes;\n  let i = 0;\n  while (length > 0) {\n    bytes = wordToByteArray(wordArray[i], Math.min(4, length));\n    length -= bytes.length;\n    result = [...result, bytes];\n    i++;\n  }\n  return [].concat.apply([], result);\n};\n\nexport const intToHex = (val) =>\n  val < 0 ? (Number(val) >>> 0).toString(16) : Number(val).toString(16);\n\n// We generate a CRC32 checksum, and trnasform it into a hexString\nexport const generateChecksum = (hash) => {\n  const crc = 0//crc32.unsigned(Buffer.from(hash));\n  const hex = intToHex(crc);\n  return hex.padStart(8, '0');\n};\n\n\nexport const byteArrayToWordArray = (byteArray) => {\n  const wordArray = [];\n  let i;\n  for (i = 0; i < byteArray.length; i += 1) {\n    wordArray[(i / 4) | 0] |= byteArray[i] << (24 - 8 * i);\n  }\n  // eslint-disable-next-line\n  const result = CryptoJS.lib.WordArray.create(\n    wordArray,\n    byteArray.length\n  );\n  return result;\n};\n\nexport const to32bits = (num) => {\n  const b = new ArrayBuffer(4);\n  new DataView(b).setUint32(0, num);\n  return Array.from(new Uint8Array(b));\n};\n\nexport const getAccountId = (\n  principal,\n  subAccount\n) => {\n  const sha = CryptoJS.algo.SHA224.create();\n  sha.update(ACCOUNT_DOMAIN_SEPERATOR); // Internally parsed with UTF-8, like go does\n  sha.update(byteArrayToWordArray(principal.toUint8Array()));\n  const subBuffer = Buffer.from(SUB_ACCOUNT_ZERO);\n  if (subAccount) {\n    subBuffer.writeUInt32BE(subAccount);\n  }\n  sha.update(byteArrayToWordArray(subBuffer));\n  const hash = sha.finalize();\n\n  /// While this is backed by an array of length 28, it's canonical representation\n  /// is a hex string of length 64. The first 8 characters are the CRC-32 encoded\n  /// hash of the following 56 characters of hex. Both, upper and lower case\n  /// characters are valid in the input string and can even be mixed.\n  /// [ic/rs/rosetta-api/ledger_canister/src/account_identifier.rs]\n  const byteArray = wordArrayToByteArray(hash, 28);\n  const checksum = generateChecksum(byteArray);\n  const val = checksum + hash.toString();\n\n  return val;\n};\n\nexport const getTokenIdentifier = (canister, index) => {\n  const padding = Buffer.from('\\x0Atid');\n  const array = new Uint8Array([\n    ...padding,\n    ...Principal.fromText(canister).toUint8Array(),\n    ...to32bits(index),\n  ]);\n  return Principal.fromUint8Array(array).toText();\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export default ({ IDL }) => {\n  const TxError = IDL.Variant({\n    'InsufficientAllowance': IDL.Null,\n    'InsufficientBalance': IDL.Null,\n    'ErrorOperationStyle': IDL.Null,\n    'Unauthorized': IDL.Null,\n    'LedgerTrap': IDL.Null,\n    'ErrorTo': IDL.Null,\n    'Other': IDL.Null,\n    'BlockUsed': IDL.Null,\n    'AmountTooSmall': IDL.Null,\n  });\n  const TxReceipt = IDL.Variant({ 'Ok': IDL.Nat, 'Err': TxError });\n  const TransactionId = IDL.Nat64;\n  const BurnError = IDL.Variant({\n    'InsufficientBalance': IDL.Null,\n    'InvalidTokenContract': IDL.Null,\n    'NotSufficientLiquidity': IDL.Null,\n  });\n  const BurnResult = IDL.Variant({ 'Ok': TransactionId, 'Err': BurnError });\n  const TransactionStatus = IDL.Variant({\n    'FAILED': IDL.Null,\n    'SUCCEEDED': IDL.Null,\n  });\n  const EventDetail = IDL.Variant({\n    'Approve': IDL.Record({ 'to': IDL.Principal, 'from': IDL.Principal }),\n    'Burn': IDL.Record({ 'to': IDL.Principal, 'from': IDL.Principal }),\n    'Mint': IDL.Record({ 'to': IDL.Principal }),\n    'CanisterCreated': IDL.Record({\n      'from': IDL.Principal,\n      'canister': IDL.Principal,\n    }),\n    'CanisterCalled': IDL.Record({\n      'from': IDL.Principal,\n      'method_name': IDL.Text,\n      'canister': IDL.Principal,\n    }),\n    'Transfer': IDL.Record({ 'to': IDL.Principal, 'from': IDL.Principal }),\n    'TransferFrom': IDL.Record({\n      'to': IDL.Principal,\n      'from': IDL.Principal,\n      'caller': IDL.Principal,\n    }),\n  });\n  const Event = IDL.Record({\n    'fee': IDL.Nat64,\n    'status': TransactionStatus,\n    'kind': EventDetail,\n    'cycles': IDL.Nat64,\n    'timestamp': IDL.Nat64,\n  });\n  const EventsConnection = IDL.Record({\n    'data': IDL.Vec(Event),\n    'next_offset': TransactionId,\n    'next_canister_id': IDL.Opt(IDL.Principal),\n  });\n  const Metadata = IDL.Record({\n    'fee': IDL.Nat,\n    'decimals': IDL.Nat8,\n    'owner': IDL.Principal,\n    'logo': IDL.Text,\n    'name': IDL.Text,\n    'totalSupply': IDL.Nat,\n    'symbol': IDL.Text,\n  });\n  const Operation = IDL.Variant({\n    'transferFrom': IDL.Null,\n    'burn': IDL.Null,\n    'mint': IDL.Null,\n    'approve': IDL.Null,\n    'canisterCalled': IDL.Null,\n    'transfer': IDL.Null,\n    'canisterCreated': IDL.Null,\n  });\n  const Time = IDL.Int;\n  const TxRecord = IDL.Record({\n    'op': Operation,\n    'to': IDL.Principal,\n    'fee': IDL.Nat,\n    'status': TransactionStatus,\n    'from': IDL.Principal,\n    'timestamp': Time,\n    'caller': IDL.Opt(IDL.Principal),\n    'index': IDL.Nat,\n    'amount': IDL.Nat,\n  });\n  const MintError = IDL.Variant({ 'NotSufficientLiquidity': IDL.Null });\n  const MintResult = IDL.Variant({ 'Ok': TransactionId, 'Err': MintError });\n  const Stats = IDL.Record({\n    'fee': IDL.Nat,\n    'transfers_count': IDL.Nat64,\n    'balance': IDL.Nat64,\n    'mints_count': IDL.Nat64,\n    'transfers_from_count': IDL.Nat64,\n    'canisters_created_count': IDL.Nat64,\n    'supply': IDL.Nat,\n    'burns_count': IDL.Nat64,\n    'approvals_count': IDL.Nat64,\n    'proxy_calls_count': IDL.Nat64,\n    'history_events': IDL.Nat64,\n  });\n  const ResultCall = IDL.Variant({\n    'Ok': IDL.Record({ 'return': IDL.Vec(IDL.Nat8) }),\n    'Err': IDL.Text,\n  });\n  const CreateResult = IDL.Variant({\n    'Ok': IDL.Record({ 'canister_id': IDL.Principal }),\n    'Err': IDL.Text,\n  });\n  const ResultSend = IDL.Variant({ 'Ok': IDL.Null, 'Err': IDL.Text });\n  return IDL.Service({\n    'allowance': IDL.Func(\n      [IDL.Principal, IDL.Principal],\n      [IDL.Nat],\n      ['query'],\n    ),\n    'approve': IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\n    'balance': IDL.Func([IDL.Opt(IDL.Principal)], [IDL.Nat64], []),\n    'balanceOf': IDL.Func([IDL.Principal], [IDL.Nat], ['query']),\n    'burn': IDL.Func(\n      [IDL.Record({ 'canister_id': IDL.Principal, 'amount': IDL.Nat64 })],\n      [BurnResult],\n      [],\n    ),\n    'decimals': IDL.Func([], [IDL.Nat8], ['query']),\n    'events': IDL.Func(\n      [IDL.Record({ 'offset': IDL.Opt(IDL.Nat64), 'limit': IDL.Nat16 })],\n      [EventsConnection],\n      ['query'],\n    ),\n    'getMetadata': IDL.Func([], [Metadata], ['query']),\n    'getTransaction': IDL.Func([IDL.Nat], [TxRecord], []),\n    'getTransactions': IDL.Func([IDL.Nat, IDL.Nat], [IDL.Vec(TxRecord)], []),\n    'get_transaction': IDL.Func([TransactionId], [IDL.Opt(Event)], []),\n    'halt': IDL.Func([], [], []),\n    'historySize': IDL.Func([], [IDL.Nat], ['query']),\n    'logo': IDL.Func([], [IDL.Text], ['query']),\n    'mint': IDL.Func([IDL.Principal, IDL.Nat], [MintResult], []),\n    'name': IDL.Func([], [IDL.Text], ['query']),\n    'nameErc20': IDL.Func([], [IDL.Text], ['query']),\n    'stats': IDL.Func([], [Stats], ['query']),\n    'symbol': IDL.Func([], [IDL.Text], ['query']),\n    'totalSupply': IDL.Func([], [IDL.Nat], ['query']),\n    'transfer': IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\n    'transferErc20': IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\n    'transferFrom': IDL.Func(\n      [IDL.Principal, IDL.Principal, IDL.Nat],\n      [TxReceipt],\n      [],\n    ),\n    'wallet_balance': IDL.Func(\n      [],\n      [IDL.Record({ 'amount': IDL.Nat64 })],\n      ['query'],\n    ),\n    'wallet_call': IDL.Func(\n      [\n        IDL.Record({\n          'args': IDL.Vec(IDL.Nat8),\n          'cycles': IDL.Nat64,\n          'method_name': IDL.Text,\n          'canister': IDL.Principal,\n        }),\n      ],\n      [ResultCall],\n      [],\n    ),\n    'wallet_create_canister': IDL.Func(\n      [\n        IDL.Record({\n          'controller': IDL.Opt(IDL.Principal),\n          'cycles': IDL.Nat64,\n        }),\n      ],\n      [CreateResult],\n      [],\n    ),\n    'wallet_create_wallet': IDL.Func(\n      [\n        IDL.Record({\n          'controller': IDL.Opt(IDL.Principal),\n          'cycles': IDL.Nat64,\n        }),\n      ],\n      [CreateResult],\n      [],\n    ),\n    'wallet_send': IDL.Func(\n      [IDL.Record({ 'canister': IDL.Principal, 'amount': IDL.Nat64 })],\n      [ResultSend],\n      [],\n    ),\n  });\n};\nexport const init = () => { return []; };\n","export default ({ IDL }) => {\n  const SubAccount_2 = IDL.Vec(IDL.Nat8);\n  const SubAccount = SubAccount_2;\n  const SubAccount_3 = SubAccount;\n  const TokenIndex_2 = IDL.Nat32;\n  const TokenIndex = TokenIndex_2;\n  const AccountIdentifier_2 = IDL.Text;\n  const AccountIdentifier = AccountIdentifier_2;\n  const AccountIdentifier_3 = AccountIdentifier;\n  const Settlement = IDL.Record({\n    'subaccount' : SubAccount_3,\n    'seller' : IDL.Principal,\n    'buyer' : AccountIdentifier_3,\n    'price' : IDL.Nat64,\n  });\n  const Metadata_2 = IDL.Variant({\n    'fungible' : IDL.Record({\n      'decimals' : IDL.Nat8,\n      'metadata' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      'name' : IDL.Text,\n      'symbol' : IDL.Text,\n    }),\n    'nonfungible' : IDL.Record({ 'metadata' : IDL.Opt(IDL.Vec(IDL.Nat8)) }),\n  });\n  const Metadata = Metadata_2;\n  const TokenIdentifier = IDL.Text;\n  const User = IDL.Variant({\n    'principal' : IDL.Principal,\n    'address' : AccountIdentifier,\n  });\n  const BalanceRequest_2 = IDL.Record({\n    'token' : TokenIdentifier,\n    'user' : User,\n  });\n  const BalanceRequest = BalanceRequest_2;\n  const Balance = IDL.Nat;\n  const CommonError_2 = IDL.Variant({\n    'InvalidToken' : TokenIdentifier,\n    'Other' : IDL.Text,\n  });\n  const Result_10 = IDL.Variant({ 'ok' : Balance, 'err' : CommonError_2 });\n  const BalanceResponse_2 = Result_10;\n  const BalanceResponse = BalanceResponse_2;\n  const TokenIdentifier_2 = TokenIdentifier;\n  const CommonError = CommonError_2;\n  const Result_7 = IDL.Variant({\n    'ok' : AccountIdentifier_3,\n    'err' : CommonError,\n  });\n  const Time_2 = IDL.Int;\n  const Time = Time_2;\n  const Listing = IDL.Record({\n    'locked' : IDL.Opt(Time),\n    'seller' : IDL.Principal,\n    'price' : IDL.Nat64,\n  });\n  const Result_9 = IDL.Variant({\n    'ok' : IDL.Tuple(AccountIdentifier_3, IDL.Opt(Listing)),\n    'err' : CommonError,\n  });\n  const User_2 = User;\n  const Extension_2 = IDL.Text;\n  const Extension = Extension_2;\n  const Wearable_2 = IDL.Record({\n    'hat' : IDL.Opt(IDL.Tuple(IDL.Nat32, IDL.Nat32)),\n    'pet' : IDL.Opt(IDL.Tuple(IDL.Nat32, IDL.Nat32)),\n    'accessory' : IDL.Opt(IDL.Tuple(IDL.Nat32, IDL.Nat32)),\n    'eyewear' : IDL.Opt(IDL.Tuple(IDL.Nat32, IDL.Nat32)),\n  });\n  const Wearable = Wearable_2;\n  const HeaderField = IDL.Tuple(IDL.Text, IDL.Text);\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(HeaderField),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(HeaderField),\n    'status_code' : IDL.Nat16,\n  });\n  const Result_8 = IDL.Variant({ 'ok' : TokenIndex, 'err' : CommonError });\n  const ListRequest = IDL.Record({\n    'token' : TokenIdentifier_2,\n    'from_subaccount' : IDL.Opt(SubAccount_3),\n    'price' : IDL.Opt(IDL.Nat64),\n  });\n  const Result_5 = IDL.Variant({ 'ok' : IDL.Null, 'err' : CommonError });\n  const Result_6 = IDL.Variant({ 'ok' : Metadata, 'err' : CommonError });\n  const MintRequest_2 = IDL.Record({\n    'to' : User,\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const MintRequest = MintRequest_2;\n  const Balance_2 = Balance;\n  const Result_4 = IDL.Variant({ 'ok' : Balance_2, 'err' : CommonError });\n  const Result_3 = IDL.Variant({\n    'ok' : IDL.Vec(TokenIndex),\n    'err' : CommonError,\n  });\n  const Result_2 = IDL.Variant({\n    'ok' : IDL.Vec(\n      IDL.Tuple(TokenIndex, IDL.Opt(Listing), IDL.Opt(IDL.Vec(IDL.Nat8)))\n    ),\n    'err' : CommonError,\n  });\n  const Transaction2 = IDL.Record({\n    'token' : TokenIdentifier_2,\n    'time' : Time,\n    'seller' : IDL.Principal,\n    'buyer' : AccountIdentifier_3,\n    'price' : IDL.Nat64,\n  });\n  const Memo = IDL.Vec(IDL.Nat8);\n  const TransferRequest_2 = IDL.Record({\n    'to' : User,\n    'token' : TokenIdentifier,\n    'notify' : IDL.Bool,\n    'from' : User,\n    'memo' : Memo,\n    'subaccount' : IDL.Opt(SubAccount),\n    'amount' : Balance,\n  });\n  const TransferRequest = TransferRequest_2;\n  const Result = IDL.Variant({\n    'ok' : Balance,\n    'err' : IDL.Variant({\n      'CannotNotify' : AccountIdentifier,\n      'InsufficientBalance' : IDL.Null,\n      'InvalidToken' : TokenIdentifier,\n      'Rejected' : IDL.Null,\n      'Unauthorized' : AccountIdentifier,\n      'Other' : IDL.Text,\n    }),\n  });\n  const TransferResponse_2 = Result;\n  const TransferResponse = TransferResponse_2;\n  const erc721_token = IDL.Service({\n    'acceptCycles' : IDL.Func([], [], []),\n    'addRefund' : IDL.Func(\n        [IDL.Text, IDL.Principal, SubAccount_3],\n        [],\n        ['oneway'],\n      ),\n    'availableCycles' : IDL.Func([], [IDL.Nat], ['query']),\n    'backendRefundSettlement' : IDL.Func(\n        [IDL.Text],\n        [\n          IDL.Vec(IDL.Tuple(TokenIndex, Settlement)),\n          IDL.Vec(IDL.Tuple(AccountIdentifier_3, IDL.Principal, SubAccount_3)),\n          IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Vec(SubAccount_3))),\n          IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Vec(SubAccount_3))),\n        ],\n        ['query'],\n      ),\n    'backup' : IDL.Func(\n        [],\n        [\n          IDL.Vec(IDL.Tuple(TokenIndex, AccountIdentifier_3)),\n          IDL.Vec(IDL.Tuple(AccountIdentifier_3, IDL.Vec(TokenIndex))),\n          IDL.Vec(IDL.Tuple(TokenIndex, Metadata)),\n        ],\n        ['query'],\n      ),\n    'balance' : IDL.Func([BalanceRequest], [BalanceResponse], ['query']),\n    'bearer' : IDL.Func([TokenIdentifier_2], [Result_7], ['query']),\n    'details' : IDL.Func([TokenIdentifier_2], [Result_9], ['query']),\n    'disribute' : IDL.Func([User_2], [], []),\n    'extensions' : IDL.Func([], [IDL.Vec(Extension)], ['query']),\n    'freeGift' : IDL.Func([AccountIdentifier_3], [IDL.Opt(TokenIndex)], []),\n    'getAllPayments' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Vec(SubAccount_3)))],\n        ['query'],\n      ),\n    'getAllWearables' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(TokenIndex, Wearable))],\n        ['query'],\n      ),\n    'getBuyers' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(AccountIdentifier_3, IDL.Vec(TokenIndex)))],\n        ['query'],\n      ),\n    'getMinted' : IDL.Func([], [TokenIndex], ['query']),\n    'getMinter' : IDL.Func([], [IDL.Principal], ['query']),\n    'getRegistry' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(TokenIndex, AccountIdentifier_3))],\n        ['query'],\n      ),\n    'getSold' : IDL.Func([], [TokenIndex], ['query']),\n    'getTokens' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(TokenIndex, Metadata))],\n        ['query'],\n      ),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], ['query']),\n    'index' : IDL.Func([TokenIdentifier_2], [Result_8], ['query']),\n    'list' : IDL.Func([ListRequest], [Result_5], []),\n    'listings' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(TokenIndex, Listing, Metadata))],\n        ['query'],\n      ),\n    'lock' : IDL.Func(\n        [TokenIdentifier_2, IDL.Nat64, AccountIdentifier_3, SubAccount_3],\n        [Result_7],\n        [],\n      ),\n    'metadata' : IDL.Func([TokenIdentifier_2], [Result_6], ['query']),\n    'mintNFT' : IDL.Func([MintRequest], [TokenIndex], []),\n    'payments' : IDL.Func([], [IDL.Opt(IDL.Vec(SubAccount_3))], ['query']),\n    'receiveWearable' : IDL.Func(\n        [TokenIndex, TokenIndex, IDL.Vec(IDL.Nat8), AccountIdentifier_3],\n        [\n          IDL.Variant({\n            'replaced' : TokenIndex,\n            'success' : IDL.Null,\n            'failed' : IDL.Null,\n          }),\n        ],\n        [],\n      ),\n    'refunds' : IDL.Func([], [IDL.Opt(IDL.Vec(SubAccount_3))], ['query']),\n    'removePayments' : IDL.Func([IDL.Vec(SubAccount_3)], [], []),\n    'removeRefunds' : IDL.Func([IDL.Vec(SubAccount_3)], [], []),\n    'retreiveSnapshot' : IDL.Func(\n        [IDL.Text],\n        [IDL.Vec(AccountIdentifier_3)],\n        [],\n      ),\n    'setMinter' : IDL.Func([IDL.Principal], [], []),\n    'settle' : IDL.Func([TokenIdentifier_2], [Result_5], []),\n    'settle_force' : IDL.Func([IDL.Text, TokenIdentifier_2], [], ['oneway']),\n    'settlements' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(TokenIndex, AccountIdentifier_3, IDL.Nat64))],\n        ['query'],\n      ),\n      \n    'salesStats' : IDL.Func(\n        [],\n        [\n          IDL.Bool,\n          IDL.Nat32,\n          IDL.Nat32,\n          IDL.Nat,\n          IDL.Tuple(IDL.Nat64, TokenIndex),\n        ],\n        ['query'],\n      ),\n    'supply' : IDL.Func([TokenIdentifier_2], [Result_4], ['query']),\n    'takeSnapshot' : IDL.Func([IDL.Text], [IDL.Nat], []),\n    'tokens' : IDL.Func([AccountIdentifier_3], [Result_3], ['query']),\n    'tokens_ext' : IDL.Func([AccountIdentifier_3], [Result_2], ['query']),\n    'transactions' : IDL.Func([], [IDL.Vec(Transaction2)], ['query']),\n    'transfer' : IDL.Func([TransferRequest], [TransferResponse], []),\n  });\n  return erc721_token;\n};\nexport const init = ({ IDL }) => { return []; };","export default ({ IDL }) => {\n  const AccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat32),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat32),\n    'controller_id' : IDL.Principal,\n  });\n  const ICPTs = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const LedgerCanisterInitPayload = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Tuple(IDL.Principal)),\n    'minting_account' : AccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat32),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(AccountIdentifier, ICPTs)),\n  });\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const CanisterId = IDL.Principal;\n  const HeaderField = IDL.Tuple(IDL.Text, IDL.Text);\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(HeaderField),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(HeaderField),\n    'status_code' : IDL.Nat16,\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const BlockHeight = IDL.Nat64;\n  const NotifyCanisterArgs = IDL.Record({\n    'to_subaccount' : IDL.Opt(SubAccount),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'to_canister' : IDL.Principal,\n    'max_fee' : ICPTs,\n    'block_height' : BlockHeight,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const SendArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : ICPTs,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : ICPTs,\n  });\n  return IDL.Service({\n    'account_balance_dfx' : IDL.Func([AccountBalanceArgs], [ICPTs], ['query']),\n    'get_nodes' : IDL.Func([], [IDL.Vec(CanisterId)], ['query']),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], ['query']),\n    'notify_dfx' : IDL.Func([NotifyCanisterArgs], [], []),\n    'send_dfx' : IDL.Func([SendArgs], [BlockHeight], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const AccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat32),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat32),\n    'controller_id' : IDL.Principal,\n  });\n  const ICPTs = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const LedgerCanisterInitPayload = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Tuple(IDL.Principal)),\n    'minting_account' : AccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat32),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(AccountIdentifier, ICPTs)),\n  });\n  return [LedgerCanisterInitPayload];\n};"],"sourceRoot":""}