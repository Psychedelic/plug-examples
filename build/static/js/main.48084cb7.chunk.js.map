{"version":3,"sources":["idls/xtc.did.js","idls/ext.did.js","idls/nns-minting.did.js","App.js","reportWebVitals.js","index.js"],"names":["IDL","TransactionId","Nat64","BurnError","Variant","InsufficientBalance","Null","InvalidTokenContract","NotSufficientLiquidity","TxReceipt","Err","InsufficientAllowance","Ok","Nat","BurnResult","TokenMetaData","Record","features","Vec","Text","name","decimal","Nat8","symbol","TransferError","canister_id","Principal","method_name","CallFailed","Unknown","AmountTooLarge","TransferResult","Service","meta","Func","meta_certified","balance","Opt","burn","amount","transfer","to","from","transferERC20","TokenIndex","Nat32","AccountIdentifier","TokenIdentifier","Balance","Time","Int","SubAccount","Memo","Listing","locked","seller","price","User","principal","address","CommonError","InvalidToken","Other","BalanceRequest","token","user","BalanceResult","ok","err","DetailsResult","Tuple","TokensResult","TokenExtResult","TransferRequest","notify","Bool","memo","subaccount","CannotNotify","Rejected","Unauthorized","Metadata","fungible","decimals","metadata","nonfungible","MetadataResult","details","tokens","tokens_ext","SetAuthorizedSubnetworkListArgs","ICPTs","TransactionNotification","CyclesResponse","Result","XTC_CANISTER_ID","STARVERSE_CID","NNS_MINTING_CID","CYCLES_PER_TC","E8S_PER_ICP","getTokenIdentifier","canister","index","padding","Buffer","array","Uint8Array","fromText","toUint8Array","num","b","ArrayBuffer","DataView","setUint32","Array","to32bits","fromUint8Array","toText","App","useState","setTo","setAmount","connected","setConnected","nftIndex","setNFTIndex","safeXTCTransfer","a","window","ic","plug","createActor","canisterId","interfaceFactory","XtcIDL","actor","BigInt","response","console","log","unsafeXTCTransfer","Actor","agent","safeNFTTransfer","ExtIDL","getPrincipal","fill","unsafeNFTTransfer","safeCanisterCall","nnsMintingDid","e8s","to_subaccount","from_subaccount","block_height","transaction_notification","unsafeCanisterCall","className","dark","onConnectCallback","whitelist","htmlFor","type","onChange","e","target","value","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48084cb7.chunk.js","sourcesContent":["export default ({ IDL }) => {\n  const TransactionId = IDL.Nat64;\n  const BurnError = IDL.Variant({\n    InsufficientBalance: IDL.Null,\n    InvalidTokenContract: IDL.Null,\n    NotSufficientLiquidity: IDL.Null,\n  });\n\n  const TxReceipt = IDL.Variant({\n    Err: IDL.Variant({\n      InsufficientAllowance: IDL.Null,\n      InsufficientBalance: IDL.Null,\n    }),\n    Ok: IDL.Nat,\n  });\n\n  const BurnResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: BurnError,\n  });\n  const TokenMetaData = IDL.Record({\n    features: IDL.Vec(IDL.Text),\n    name: IDL.Text,\n    decimal: IDL.Nat8,\n    symbol: IDL.Text,\n  });\n  const NotifyArgs = IDL.Record({\n    canister_id: IDL.Principal,\n    method_name: IDL.Text,\n  });\n  const TransferError = IDL.Variant({\n    CallFailed: IDL.Null,\n    InsufficientBalance: IDL.Null,\n    Unknown: IDL.Null,\n    AmountTooLarge: IDL.Null,\n  });\n  const TransferResult = IDL.Variant({\n    Ok: TransactionId,\n    Err: TransferError,\n  });\n  return IDL.Service({\n    meta: IDL.Func([], [TokenMetaData], ['query']),\n    meta_certified: IDL.Func([], [TokenMetaData], []),\n    balance: IDL.Func([IDL.Opt(IDL.Principal)], [IDL.Nat64], []),\n    burn: IDL.Func(\n      [IDL.Record({ canister_id: IDL.Principal, amount: IDL.Nat64 })],\n      [BurnResult],\n      []\n    ),\n    transfer: IDL.Func(\n      [\n        IDL.Record({\n          to: IDL.Principal,\n          from: IDL.Opt(IDL.Principal),\n          amount: IDL.Nat64,\n        }),\n      ],\n      [TransferResult],\n      []\n    ),\n    transferERC20: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\n  });\n};\nexport const init = () => {\n  return [];\n};\n","export default ({ IDL }) => {\n  const TokenIndex = IDL.Nat32;\n  const AccountIdentifier = IDL.Text;\n  const TokenIdentifier = IDL.Text;\n  const Balance = IDL.Nat;\n  const Time = IDL.Int;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Memo = IDL.Vec(IDL.Nat8);\n  const Listing = IDL.Record({\n    locked: IDL.Opt(Time),\n    seller: IDL.Principal,\n    price: IDL.Nat64,\n  });\n  const User = IDL.Variant({\n    principal: IDL.Principal,\n    address: AccountIdentifier,\n  });\n  const CommonError = IDL.Variant({\n    InvalidToken: TokenIdentifier,\n    Other: IDL.Text,\n  });\n\n  const BalanceRequest = IDL.Record({\n    token: TokenIdentifier,\n    user: User,\n  });\n  const BalanceResult = IDL.Variant({ ok: Balance, err: CommonError });\n\n  const DetailsResult = IDL.Variant({\n    ok: IDL.Tuple(AccountIdentifier, IDL.Opt(Listing)),\n    err: CommonError,\n  });\n\n  const TokensResult = IDL.Variant({\n    ok: IDL.Vec(TokenIndex),\n    err: CommonError,\n  });\n  const TokenExtResult = IDL.Variant({\n    ok: IDL.Vec(\n      IDL.Tuple(TokenIndex, IDL.Opt(Listing), IDL.Opt(IDL.Vec(IDL.Nat8)))\n    ),\n    err: CommonError,\n  });\n\n  const TransferRequest = IDL.Record({\n    to: User,\n    token: TokenIdentifier,\n    notify: IDL.Bool,\n    from: User,\n    memo: Memo,\n    subaccount: IDL.Opt(SubAccount),\n    amount: Balance,\n  });\n  const TransferResult = IDL.Variant({\n    ok: Balance,\n    err: IDL.Variant({\n      CannotNotify: AccountIdentifier,\n      InsufficientBalance: IDL.Null,\n      InvalidToken: TokenIdentifier,\n      Rejected: IDL.Null,\n      Unauthorized: AccountIdentifier,\n      Other: IDL.Text,\n    }),\n  });\n  const Metadata = IDL.Variant({\n    fungible: IDL.Record({\n      decimals: IDL.Nat8,\n      metadata: IDL.Opt(IDL.Vec(IDL.Nat8)),\n      name: IDL.Text,\n      symbol: IDL.Text,\n    }),\n    nonfungible: IDL.Record({ metadata: IDL.Opt(IDL.Vec(IDL.Nat8)) }),\n  });\n  const MetadataResult = IDL.Variant({ ok: Metadata, err: CommonError });\n  return IDL.Service({\n    balance: IDL.Func([BalanceRequest], [BalanceResult], ['query']),\n    details: IDL.Func([TokenIdentifier], [DetailsResult], ['query']),\n    tokens: IDL.Func([AccountIdentifier], [TokensResult], ['query']),\n    tokens_ext: IDL.Func([AccountIdentifier], [TokenExtResult], []),\n    transfer: IDL.Func([TransferRequest], [TransferResult], []),\n    metadata: IDL.Func([TokenIdentifier], [MetadataResult], ['query']),\n  });\n};\nexport const init = () => {\n  return [];\n};\n","export default ({ IDL }) => {\n  const SetAuthorizedSubnetworkListArgs = IDL.Record({\n    'who' : IDL.Opt(IDL.Principal),\n    'subnets' : IDL.Vec(IDL.Principal),\n  });\n  const ICPTs = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TransactionNotification = IDL.Record({\n    'to' : IDL.Principal,\n    'to_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from' : IDL.Principal,\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'amount' : ICPTs,\n    'block_height' : IDL.Nat64,\n  });\n  const CyclesResponse = IDL.Variant({\n    'Refunded' : IDL.Tuple(IDL.Text, IDL.Opt(IDL.Nat64)),\n    'CanisterCreated' : IDL.Principal,\n    'ToppedUp' : IDL.Null,\n  });\n  const Result = IDL.Variant({ 'Ok' : CyclesResponse, 'Err' : IDL.Text });\n  return IDL.Service({\n    'set_authorized_subnetwork_list' : IDL.Func(\n        [SetAuthorizedSubnetworkListArgs],\n        [],\n        [],\n      ),\n    'transaction_notification' : IDL.Func(\n        [TransactionNotification],\n        [Result],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => { return []; };","import React, { useEffect, useState } from 'react';\nimport PlugConnect from '@psychedelic/plug-connect';\nimport { Principal } from '@dfinity/principal';\nimport { Actor } from '@dfinity/agent';\n\nimport XtcIDL from './idls/xtc.did';\nimport ExtIDL from './idls/ext.did';\nimport './App.css';\nimport nnsMintingDid from './idls/nns-minting.did';\n\nconst XTC_CANISTER_ID = 'aanaa-xaaaa-aaaah-aaeiq-cai';\nconst STARVERSE_CID = 'nbg4r-saaaa-aaaah-qap7a-cai';\nconst NNS_MINTING_CID = 'rkp4c-7iaaa-aaaaa-aaaca-cai';\nconst CYCLES_PER_TC = 1_000_000_000_000;\nconst E8S_PER_ICP = 100_000_000;\n\nexport const to32bits = (num) => {\n  const b = new ArrayBuffer(4);\n  new DataView(b).setUint32(0, num);\n  return Array.from(new Uint8Array(b));\n};\n\nconst getTokenIdentifier = (canister, index) => {\n  const padding = Buffer.from('\\x0Atid');\n  const array = new Uint8Array([\n    ...padding,\n    ...Principal.fromText(canister).toUint8Array(),\n    ...to32bits(index),\n  ]);\n  return Principal.fromUint8Array(array).toText();\n};\n\nfunction App() {\n  const [to, setTo] = useState();\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [nftIndex, setNFTIndex] = useState(0);\n  \n  const handleChangeTo = e => setTo(e.target.value);\n  const handleChangeAmount = e => setAmount(e.target.value);\n  const handleChangeIndex = e => setNFTIndex(e.target.value);\n\n  const safeXTCTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: XTC_CANISTER_ID, interfaceFactory: XtcIDL });\n    // request a transfer using this actor\n    const response = await actor.transfer({ to: Principal.fromText(to), amount: BigInt(amount*CYCLES_PER_TC), from: [] });\n    console.log('response', response);\n  }\n\n  const unsafeXTCTransfer = async () => {\n    const actor = await Actor.createActor(XtcIDL, {\n      agent: window.ic.plug.agent,\n      canisterId: XTC_CANISTER_ID,\n    });\n    const response = await actor.transfer({ to: Principal.fromText(to), amount: BigInt(amount*CYCLES_PER_TC), from: [] });\n    console.log('response', response);\n  }\n\n\n  const safeNFTTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await window.ic.plug.createActor({ canisterId: STARVERSE_CID, interfaceFactory: ExtIDL });\n    // request a transfer using this actor\n    const response = await actor.transfer({\n      to: { principal: Principal.from(to) },\n      from: { principal: await window.ic.plug.agent.getPrincipal() },\n      token: getTokenIdentifier(STARVERSE_CID, nftIndex),\n      amount: BigInt(1),\n      memo: new Array(32).fill(0),\n      notify: false,\n      subaccount: [],\n    });\n    console.log('response', response);\n  };\n\n  const unsafeNFTTransfer = async () => {\n    // create an actor to interact with XTC\n    const actor = await Actor.createActor(ExtIDL, {\n      agent: window.ic.plug.agent,\n      canisterId: STARVERSE_CID,\n    });\n    // request a transfer using this actor\n    const response = await actor.transfer({\n      to: { principal: Principal.from(to) },\n      from: { principal: await window.ic.plug.agent.getPrincipal() },\n      token: getTokenIdentifier(STARVERSE_CID, nftIndex),\n      amount: BigInt(1),\n      memo: new Array(32).fill(0),\n      notify: false,\n      subaccount: [],\n    });\n    console.log('response', response);\n  };\n\n  const safeCanisterCall = async () => {\n    const actor = await window.ic.plug.createActor({ canisterId: NNS_MINTING_CID, interfaceFactory: nnsMintingDid });\n    // request a transfer using this actor\n    const response = await actor.transaction_notification({\n      to: Principal.from(to),\n      from: await window.ic.plug.agent.getPrincipal(),\n      amount:  { e8s: BigInt(amount*E8S_PER_ICP) },\n      memo: BigInt(100),\n      notify: false,\n      to_subaccount: [],\n      from_subaccount: [],\n      block_height: BigInt(100),\n    });\n    console.log('response', response);\n  }\n\n  const unsafeCanisterCall = async () => {\n    const actor = await Actor.createActor(nnsMintingDid, {\n      agent: window.ic.plug.agent,\n      canisterId: NNS_MINTING_CID,\n    });\n    // request a transfer using this actor\n    const response = await actor.transaction_notification({\n      to: Principal.from(to),\n      from: await window.ic.plug.agent.getPrincipal(),\n      amount:  { e8s: BigInt(amount*E8S_PER_ICP) },\n      memo: BigInt(100),\n      notify: false,\n      to_subaccount: [],\n      from_subaccount: [],\n      block_height: BigInt(100),\n    });\n    console.log('response', response);\n  }\n\n  return (\n    <div className=\"flex column center\">\n      <h1>Plug Examples</h1>\n      <h2>Security Example</h2>\n      <div className=\"plug-button\">\n        {connected ? 'Connected to plug' : <PlugConnect dark onConnectCallback={() => setConnected(true)} whitelist={[XTC_CANISTER_ID, STARVERSE_CID, NNS_MINTING_CID]} />}\n      </div>\n      {connected && (\n      <>\n        <div className=\"flex column input-container\">\n          <label htmlFor=\"to\">Recipient principal</label>\n          <input name=\"to\" type=\"text\" onChange={handleChangeTo} value={to} />\n        </div>\n        <div className=\"flex column input-container\">\n          <label htmlFor=\"to\">Amount of XTC</label>\n          <input name=\"to\" type=\"number\" onChange={handleChangeAmount} value={amount} />\n        </div>\n        <div className=\"flex column input-container\">\n          <label htmlFor=\"to\">Starverse Index</label>\n          <input name=\"to\" type=\"number\" onChange={handleChangeIndex} value={nftIndex} />\n        </div>\n        <div className=\"security-actions-container flex column\">\n          <h3>Safe Calls</h3>\n          <button disabled={!to} type=\"button\" onClick={safeXTCTransfer}>{`Transfer ${amount} XTC (${CYCLES_PER_TC * amount} cycles)`}</button>\n          <button disabled={!to} type=\"button\" onClick={safeNFTTransfer}>{`Transfer Starverse #${nftIndex}`}</button>\n          <button disabled={!to} type=\"button\" onClick={safeCanisterCall}>Call NNS Minting Canister</button> \n        </div>\n        <div className=\"security-actions-container\">\n          <h3>Unsafe Calls</h3>\n          <button disabled={!to} type=\"button\" onClick={unsafeXTCTransfer}>{`Transfer 0.000001 XTC (1000 cycles)`}</button>\n          <button disabled={!to} type=\"button\" onClick={unsafeNFTTransfer}>Transfer NFT</button>\n          <button disabled={!to} type=\"button\" onClick={unsafeCanisterCall}>Call NNS Minting Canister</button> \n        </div>\n      </>\n      )}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}